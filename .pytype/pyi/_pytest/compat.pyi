# (generated with --quick)

import _pytest.outcomes
import contextlib
from typing import Any, Callable, ContextManager, Dict, Iterator, NoReturn, Optional, Pattern, Tuple, Type, TypeVar, Union

ATTRS_EQ_FIELD: str
Final: Any
MODULE_NOT_FOUND_ERROR: str
NOTSET: Any
Parameter: Type[inspect.Parameter]
REGEX_TYPE: Type[Pattern]
STRING_TYPES: Tuple[Type[bytes], Type[str]]
TEST_OUTCOME: Tuple[Type[_pytest.outcomes.OutcomeException], Type[Exception]]
_non_printable_ascii_translate_table: Dict[int, str]
attr: module
cached_property: Type[functools.cached_property]
enum: module
fail: _pytest.outcomes._WithException[Callable, Type[_pytest.outcomes.Failed]]
final: Any
functools: module
importlib_metadata: Any
inspect: module
order_preserving_dict: Type[dict]
os: module
re: module
sys: module

_S = TypeVar('_S')
_T = TypeVar('_T')

class NotSetType(enum.Enum):
    token: int

class _PytestWrapper:
    __doc__: str
    obj: Any
    def __init__(self, obj) -> None: ...

def _bytes_to_ascii(val: bytes) -> str: ...
def _format_args(func: Callable) -> str: ...
def _translate_non_printable(s: str) -> str: ...
def ascii_escaped(val: Union[bytes, str]) -> str: ...
def assert_never(value) -> NoReturn: ...
def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
@overload
def fspath(path: _PathLike) -> Any: ...
@overload
def fspath(path: str) -> str: ...
@overload
def fspath(path: bytes) -> bytes: ...
def get_default_arg_names(function: Callable) -> Tuple[str, ...]: ...
def get_real_func(obj) -> Any: ...
def get_real_method(obj, holder) -> Any: ...
def getfuncargnames(function: Callable, *, name: str = ..., is_method: bool = ..., cls: Optional[type] = ...) -> Tuple[str, ...]: ...
def getimfunc(func) -> Any: ...
def getlocation(function, curdir: Optional[str] = ...) -> str: ...
def is_async_function(func: object) -> bool: ...
def is_generator(func: object) -> bool: ...
def iscoroutinefunction(func: object) -> bool: ...
@overload
def nullcontext() -> ContextManager[None]: ...
@overload
def nullcontext(enter_result: _T) -> ContextManager[_T]: ...
def num_mock_patch_args(function) -> int: ...
def safe_getattr(object, name: str, default) -> Any: ...
def safe_isclass(obj: object) -> bool: ...
def signature(obj: Callable, *, follow_wrapped: bool = ...) -> inspect.Signature: ...
