# (generated with --quick)

from typing import Any, Dict, IO, Optional

pprint: module
reprlib: module

class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):
    __doc__: str
    def _format(self, object: object, stream: IO[str], indent: int, allowance: int, context: Dict[int, Any], level: int) -> None: ...

class SafeRepr(reprlib.Repr):
    __doc__: str
    maxsize: int
    maxstring: int
    def __init__(self, maxsize: int) -> None: ...
    def repr(self, x: object) -> str: ...
    def repr_instance(self, x: object, level: int) -> str: ...

def _ellipsize(s: str, maxsize: int) -> str: ...
def _format_repr_exception(exc: BaseException, obj: object) -> str: ...
def _pformat_dispatch(object: object, indent: int = ..., width: int = ..., depth: Optional[int] = ..., *, compact: bool = ...) -> str: ...
def _try_repr_or_str(obj: object) -> str: ...
def safeformat(obj: object) -> str: ...
def saferepr(obj: object, maxsize: int = ...) -> str: ...
