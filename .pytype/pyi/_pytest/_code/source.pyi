# (generated with --quick)

import _ast
from typing import Any, Iterable, Iterator, List, Optional, Sequence, Tuple, TypeVar, Union

ast: module
inspect: module
overload: Any
textwrap: module
tokenize: module
warnings: module

_T = TypeVar('_T')
_TSource = TypeVar('_TSource', bound=Source)

class Source:
    __doc__: str
    __hash__: None
    lines: Any
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, key: Union[int, slice]) -> Union[Source, str]: ...
    def __init__(self, obj: object = ...) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __str__(self) -> str: ...
    def deindent(self: _TSource) -> _TSource: ...
    def getstatement(self: _TSource, lineno: int) -> _TSource: ...
    def getstatementrange(self, lineno: int) -> Tuple[int, int]: ...
    def indent(self: _TSource, indent: str = ...) -> _TSource: ...
    def strip(self: _TSource) -> _TSource: ...

def bisect_right(a: Sequence[_T], x: _T, lo: int = ..., hi: int = ...) -> int: ...
def deindent(lines: Iterable[str]) -> List[str]: ...
def findsource(obj) -> Tuple[Optional[Source], int]: ...
def get_statement_startend2(lineno: int, node: _ast.AST) -> Tuple[int, Optional[int]]: ...
def getrawcode(obj, trycall: bool = ...) -> Any: ...
def getstatementrange_ast(lineno: int, source: Source, assertion: bool = ..., astnode: Optional[_ast.AST] = ...) -> Tuple[_ast.AST, int, int]: ...
