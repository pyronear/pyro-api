# (generated with --quick)

import click._termui_impl
import click.core
import click.exceptions
import click.formatting
import click.parser
import click.types
from typing import Any, Callable, Optional, Type, TypeVar, Union

Abort: Type[click.exceptions.Abort]
Argument: Type[click.core.Argument]
BOOL: click.types.BoolParamType
BadArgumentUsage: Type[click.exceptions.BadArgumentUsage]
BadOptionUsage: Type[click.exceptions.BadOptionUsage]
BadParameter: Type[click.exceptions.BadParameter]
BaseCommand: Type[click.core.BaseCommand]
Choice: Type[click.types.Choice]
ClickException: Type[click.exceptions.ClickException]
Command: Type[click.core.Command]
CommandCollection: Type[click.core.CommandCollection]
Context: Type[click.core.Context]
DateTime: Type[click.types.DateTime]
FLOAT: click.types.FloatParamType
File: Type[click.types.File]
FileError: Type[click.exceptions.FileError]
FloatRange: Type[click.types.FloatRange]
Group: Type[click.core.Group]
HelpFormatter: Type[click.formatting.HelpFormatter]
INT: click.types.IntParamType
IntRange: Type[click.types.IntRange]
MissingParameter: Type[click.exceptions.MissingParameter]
MultiCommand: Type[click.core.MultiCommand]
NoSuchOption: Type[click.exceptions.NoSuchOption]
Option: Type[click.core.Option]
OptionParser: Type[click.parser.OptionParser]
ParamType: Type[click.types.ParamType]
Parameter: Type[click.core.Parameter]
Path: Type[click.types.Path]
STRING: click.types.StringParamType
Tuple: Type[click.types.Tuple]
UNPROCESSED: click.types.UnprocessedParamType
UUID: click.types.UUIDParameterType
UsageError: Type[click.exceptions.UsageError]
__version__: str
disable_unicode_literals_warning: bool

_T1 = TypeVar('_T1')

def argument(*param_decls, **attrs) -> Callable[[Any], Any]: ...
def clear() -> None: ...
def command(name = ..., cls = ..., **attrs) -> Callable[[Any], Any]: ...
def confirm(text, default: _T1 = ..., abort = ..., prompt_suffix = ..., show_default = ..., err = ...) -> Union[bool, _T1]: ...
def confirmation_option(*param_decls, **attrs) -> Callable[[Any], Any]: ...
def echo(message = ..., file = ..., nl = ..., err = ..., color = ...) -> None: ...
def echo_via_pager(text_or_generator, color = ...) -> Any: ...
def edit(text = ..., editor = ..., env = ..., require_save = ..., extension = ..., filename = ...) -> Optional[str]: ...
def format_filename(filename, shorten = ...) -> Any: ...
def get_app_dir(app_name, roaming = ..., force_posix = ...) -> str: ...
def get_binary_stream(name) -> Any: ...
def get_current_context(silent = ...) -> Any: ...
def get_os_args() -> Any: ...
def get_terminal_size() -> Any: ...
def get_text_stream(name, encoding = ..., errors = ...) -> Any: ...
def getchar(echo = ...) -> Any: ...
def group(name = ..., **attrs) -> Any: ...
def help_option(*param_decls, **attrs) -> Callable[[Any], Any]: ...
def launch(url, wait = ..., locate = ...) -> int: ...
def make_pass_decorator(object_type, ensure = ...) -> Callable[[Any], Any]: ...
def open_file(filename, mode = ..., encoding = ..., errors = ..., lazy = ..., atomic = ...) -> Any: ...
def option(*param_decls, **attrs) -> Callable[[Any], Any]: ...
def pass_context(f) -> Callable: ...
def pass_obj(f) -> Callable: ...
def password_option(*param_decls, **attrs) -> Callable[[Any], Any]: ...
def pause(info = ..., err = ...) -> None: ...
def progressbar(iterable = ..., length = ..., label = ..., show_eta = ..., show_percent = ..., show_pos = ..., item_show_func = ..., fill_char = ..., empty_char = ..., bar_template = ..., info_sep = ..., width = ..., file = ..., color = ...) -> click._termui_impl.ProgressBar: ...
def prompt(text, default = ..., hide_input = ..., confirmation_prompt = ..., type = ..., value_proc = ..., prompt_suffix = ..., show_default = ..., err = ..., show_choices = ...) -> Any: ...
def secho(message = ..., file = ..., nl = ..., err = ..., color = ..., **styles) -> None: ...
def style(text, fg = ..., bg = ..., bold = ..., dim = ..., underline = ..., blink = ..., reverse = ..., reset = ...) -> str: ...
def unstyle(text) -> str: ...
def version_option(version = ..., *param_decls, **attrs) -> Callable[[Any], Any]: ...
def wrap_text(text, width = ..., initial_indent = ..., subsequent_indent = ..., preserve_paragraphs = ...) -> str: ...
