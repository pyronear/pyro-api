# (generated with --quick)

import contextlib
from typing import Any, Callable, Generator, Iterator, Tuple, TypeVar

FORCED_WIDTH: None

_T = TypeVar('_T')
_T0 = TypeVar('_T0')

class HelpFormatter:
    __doc__: str
    buffer: list
    current_indent: Any
    indent_increment: Any
    indentation: Callable[..., contextlib._GeneratorContextManager]
    section: Callable[..., contextlib._GeneratorContextManager]
    width: Any
    def __init__(self, indent_increment = ..., width = ..., max_width = ...) -> None: ...
    def dedent(self) -> None: ...
    def getvalue(self) -> str: ...
    def indent(self) -> None: ...
    def write(self, string) -> None: ...
    def write_dl(self, rows, col_max = ..., col_spacing = ...) -> None: ...
    def write_heading(self, heading) -> None: ...
    def write_paragraph(self) -> None: ...
    def write_text(self, text) -> None: ...
    def write_usage(self, prog, args = ..., prefix = ...) -> None: ...

def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
def get_terminal_size() -> Any: ...
def iter_rows(rows, col_count) -> Generator[tuple, Any, None]: ...
def join_options(options) -> Tuple[str, bool]: ...
def measure_table(rows) -> tuple: ...
def split_opt(opt: _T0) -> Tuple[Any, Any]: ...
def term_len(x) -> int: ...
def wrap_text(text, width = ..., initial_indent = ..., subsequent_indent = ..., preserve_paragraphs = ...) -> str: ...
