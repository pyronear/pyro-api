# (generated with --quick)

import __builtin__
import click.exceptions
from typing import Any, Callable, Optional, Tuple, Type, TypeVar

AFTER_BAR: str
BEFORE_BAR: str
CYGWIN: bool
ClickException: Type[click.exceptions.ClickException]
WIN: bool
contextlib: module
int_types: Tuple[Type[int]]
math: module
msvcrt: module
os: module
range_type: Type[range]
raw_terminal: Callable[..., contextlib._GeneratorContextManager]
sys: module
termios: module
time: module
tty: module

_TProgressBar = TypeVar('_TProgressBar', bound=ProgressBar)

class Editor:
    editor: Any
    env: Any
    extension: Any
    require_save: Any
    def __init__(self, editor = ..., env = ..., require_save = ..., extension = ...) -> None: ...
    def edit(self, text) -> Optional[str]: ...
    def edit_file(self, filename) -> None: ...
    def get_editor(self) -> Any: ...

class ProgressBar:
    _last_line: Optional[str]
    autowidth: Any
    avg: list
    bar_template: Any
    color: Any
    current_item: Any
    empty_char: Any
    entered: bool
    eta: Any
    eta_known: int
    file: Any
    fill_char: Any
    finished: bool
    info_sep: Any
    is_hidden: bool
    iter: Any
    label: Any
    last_eta: float
    length: Any
    length_known: bool
    max_width: Any
    pct: Any
    pos: Any
    short_limit: float
    show_eta: Any
    show_percent: Any
    show_pos: Any
    start: float
    time_per_iteration: Any
    width: Any
    def __enter__(self: _TProgressBar) -> _TProgressBar: ...
    def __exit__(self, exc_type, exc_value, tb) -> None: ...
    def __init__(self, iterable, length = ..., fill_char = ..., empty_char = ..., bar_template = ..., info_sep = ..., show_eta = ..., show_percent = ..., show_pos = ..., item_show_func = ..., label = ..., file = ..., color = ..., width = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def finish(self) -> None: ...
    def format_bar(self) -> Any: ...
    def format_eta(self) -> str: ...
    def format_pct(self) -> str: ...
    def format_pos(self) -> str: ...
    def format_progress_line(self) -> Any: ...
    def generator(self) -> __builtin__.generator[Any, Any, None]: ...
    def is_fast(self) -> bool: ...
    def item_show_func(self, _1) -> Any: ...
    def make_step(self, n_steps) -> None: ...
    def next(self) -> Any: ...
    def render_finish(self) -> None: ...
    def render_progress(self) -> None: ...
    def update(self, n_steps) -> None: ...

def _default_text_stdout() -> Any: ...
def _length_hint(obj) -> Any: ...
def _nullpager(stream, generator, color) -> None: ...
def _pipepager(generator, cmd, color) -> None: ...
def _tempfilepager(generator, cmd, color) -> None: ...
def _translate_ch_to_exc(ch) -> None: ...
def echo(message = ..., file = ..., nl = ..., err = ..., color = ...) -> None: ...
def get_best_encoding(stream) -> Any: ...
def getchar(echo) -> Any: ...
def isatty(stream) -> Any: ...
def open_stream(filename, mode = ..., encoding = ..., errors = ..., atomic = ...) -> Tuple[Any, bool]: ...
def open_url(url, wait = ..., locate = ...) -> int: ...
def pager(generator, color = ...) -> Any: ...
def strip_ansi(value) -> str: ...
def term_len(x) -> int: ...
