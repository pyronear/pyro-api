# (generated with --quick)

import click._termui_impl
import click.core
import click.exceptions
import click.formatting
import click.parser
import click.types
import distutils.version
import typing
from typing import Any, Callable, Dict, List, Optional, Type, TypeVar, Union

Abort: Type[click.exceptions.Abort]
Argument: Type[click.core.Argument]
BOOL: click.types.BoolParamType
BadArgumentUsage: Type[click.exceptions.BadArgumentUsage]
BadOptionUsage: Type[click.exceptions.BadOptionUsage]
BadParameter: Type[click.exceptions.BadParameter]
BaseCommand: Type[click.core.BaseCommand]
Choice: Type[click.types.Choice]
ClickException: Type[click.exceptions.ClickException]
Command: Type[click.core.Command]
CommandCollection: Type[click.core.CommandCollection]
Context: Type[click.core.Context]
DateTime: Type[click.types.DateTime]
FLOAT: click.types.FloatParamType
File: Type[click.types.File]
FileError: Type[click.exceptions.FileError]
FloatRange: Type[click.types.FloatRange]
Group: Type[click.core.Group]
HelpFormatter: Type[click.formatting.HelpFormatter]
INT: click.types.IntParamType
IntRange: Type[click.types.IntRange]
MissingParameter: Type[click.exceptions.MissingParameter]
MultiCommand: Type[click.core.MultiCommand]
NoSuchOption: Type[click.exceptions.NoSuchOption]
Option: Type[click.core.Option]
OptionParser: Type[click.parser.OptionParser]
ParamType: Type[click.types.ParamType]
Parameter: Type[click.core.Parameter]
Path: Type[click.types.Path]
STRING: click.types.StringParamType
Tuple: Type[click.types.Tuple]
UNPROCESSED: click.types.UnprocessedParamType
UUID: click.types.UUIDParameterType
UsageError: Type[click.exceptions.UsageError]
__version__: str
disable_unicode_literals_warning: bool

_F = TypeVar('_F', bound=Callable)
_T = TypeVar('_T')
_T1 = TypeVar('_T1')

def argument(*param_decls: str, cls: Type[click.core.Argument] = ..., required: bool = ..., type: Optional[Union[Callable[[Optional[str]], Any], type, click.core._ParamType, typing.Tuple[Union[type, click.core._ParamType], ...]]] = ..., default = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Any], Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., autocompletion: Optional[Callable[[Any, List[str], str], List[Union[str, typing.Tuple[str, str]]]]] = ...) -> Callable[[_F], _F]: ...
def clear() -> None: ...
def command(name: Optional[str] = ..., cls: Optional[Type[click.core.Command]] = ..., context_settings: Optional[dict] = ..., help: Optional[str] = ..., epilog: Optional[str] = ..., short_help: Optional[str] = ..., options_metavar: str = ..., add_help_option: bool = ..., hidden: bool = ..., deprecated: bool = ...) -> Callable[[Callable], click.core.Command]: ...
def confirm(text, default: _T1 = ..., abort = ..., prompt_suffix = ..., show_default = ..., err = ...) -> Union[bool, _T1]: ...
def confirmation_option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Optional[Union[Callable[[Optional[str]], Any], type, click.core._ParamType, typing.Tuple[Union[type, click.core._ParamType], ...]]] = ..., help: str = ..., show_choices: bool = ..., default = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Any], Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ...) -> Callable[[_F], _F]: ...
def echo(message = ..., file = ..., nl = ..., err = ..., color = ...) -> None: ...
def echo_via_pager(text_or_generator, color = ...) -> Any: ...
def edit(text = ..., editor = ..., env = ..., require_save = ..., extension = ..., filename = ...) -> Optional[str]: ...
def format_filename(filename, shorten = ...) -> Any: ...
def get_app_dir(app_name, roaming = ..., force_posix = ...) -> str: ...
def get_binary_stream(name) -> Any: ...
def get_current_context(silent = ...) -> Any: ...
def get_os_args() -> Any: ...
def get_terminal_size() -> Any: ...
def get_text_stream(name, encoding = ..., errors = ...) -> Any: ...
def getchar(echo = ...) -> Any: ...
def group(name: Optional[str] = ..., cls: Type[click.core.Command] = ..., commands: Optional[Dict[str, click.core.Command]] = ..., invoke_without_command: bool = ..., no_args_is_help: bool = ..., subcommand_metavar: Optional[str] = ..., chain: bool = ..., result_callback: Optional[Callable] = ..., help: Optional[str] = ..., epilog: Optional[str] = ..., short_help: Optional[str] = ..., options_metavar: str = ..., add_help_option: bool = ..., hidden: bool = ..., deprecated: bool = ..., **kwargs) -> Callable[[Callable], click.core.Group]: ...
def help_option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Optional[Union[Callable[[Optional[str]], Any], type, click.core._ParamType, typing.Tuple[Union[type, click.core._ParamType], ...]]] = ..., help: str = ..., show_choices: bool = ..., default = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Any], Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ...) -> Callable[[_F], _F]: ...
def launch(url, wait = ..., locate = ...) -> int: ...
def make_pass_decorator(object_type: type, ensure: bool = ...) -> Callable[[_T], _T]: ...
def open_file(filename, mode = ..., encoding = ..., errors = ..., lazy = ..., atomic = ...) -> Any: ...
@overload
def option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Type[int] = ..., help: Optional[str] = ..., show_choices: bool = ..., default = ..., required: bool = ..., callback: Callable[[click.core.Context, click.core.Parameter, int], Any] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., **kwargs) -> Callable[[_F], _F]: ...
@overload
def option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Type[str] = ..., help: Optional[str] = ..., show_choices: bool = ..., default = ..., required: bool = ..., callback: Callable[[click.core.Context, click.core.Parameter, str], Any] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., **kwargs) -> Callable[[_F], _F]: ...
@overload
def option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: _T = ..., help: Optional[str] = ..., show_choices: bool = ..., default = ..., required: bool = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Optional[Union[int, str]]], _T]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., **kwargs) -> Callable[[_F], _F]: ...
@overload
def option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Optional[Union[Callable[[Optional[str]], Any], type, click.core._ParamType, typing.Tuple[Union[type, click.core._ParamType], ...]]] = ..., help: Optional[str] = ..., show_choices: bool = ..., default = ..., required: bool = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Any], Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ..., **kwargs) -> Callable[[_F], _F]: ...
def pass_context(_T) -> _T: ...
def pass_obj(_T) -> _T: ...
def password_option(*param_decls: str, cls: Type[click.core.Option] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Optional[Union[Callable[[Optional[str]], Any], type, click.core._ParamType, typing.Tuple[Union[type, click.core._ParamType], ...]]] = ..., help: Optional[str] = ..., show_choices: bool = ..., default = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Any], Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ...) -> Callable[[_F], _F]: ...
def pause(info = ..., err = ...) -> None: ...
def progressbar(iterable = ..., length = ..., label = ..., show_eta = ..., show_percent = ..., show_pos = ..., item_show_func = ..., fill_char = ..., empty_char = ..., bar_template = ..., info_sep = ..., width = ..., file = ..., color = ...) -> click._termui_impl.ProgressBar: ...
def prompt(text, default = ..., hide_input = ..., confirmation_prompt = ..., type = ..., value_proc = ..., prompt_suffix = ..., show_default = ..., err = ..., show_choices = ...) -> Any: ...
def secho(message = ..., file = ..., nl = ..., err = ..., color = ..., **styles) -> None: ...
def style(text, fg = ..., bg = ..., bold = ..., dim = ..., underline = ..., blink = ..., reverse = ..., reset = ...) -> str: ...
def unstyle(text) -> str: ...
def version_option(version: Optional[Union[str, distutils.version.Version]] = ..., *param_decls: str, cls: Type[click.core.Option] = ..., prog_name: Optional[str] = ..., message: Optional[str] = ..., show_default: Union[bool, str] = ..., prompt: Union[bool, str] = ..., confirmation_prompt: bool = ..., hide_input: bool = ..., is_flag: bool = ..., flag_value = ..., multiple: bool = ..., count: bool = ..., allow_from_autoenv: bool = ..., type: Optional[Union[Callable[[Optional[str]], Any], type, click.core._ParamType, typing.Tuple[Union[type, click.core._ParamType], ...]]] = ..., help: str = ..., show_choices: bool = ..., default = ..., callback: Optional[Callable[[click.core.Context, click.core.Parameter, Any], Any]] = ..., nargs: Optional[int] = ..., metavar: Optional[str] = ..., expose_value: bool = ..., is_eager: bool = ..., envvar: Optional[Union[str, List[str]]] = ...) -> Callable[[_F], _F]: ...
def wrap_text(text, width = ..., initial_indent = ..., subsequent_indent = ..., preserve_paragraphs = ...) -> str: ...
