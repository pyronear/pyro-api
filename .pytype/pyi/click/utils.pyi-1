# (generated with --quick)

from typing import Any, Callable, Dict, Optional, Tuple, Type, TypeVar, Union

PY2: bool
WIN: bool
_get_windows_argv: Any
_hash_py_argv: Any
_initial_argv_hash: Any
auto_wrap_for_ansi: Optional[Callable]
binary_streams: Dict[str, Callable[[], Any]]
echo_native_types: Tuple[Type[Union[bytearray, bytes, str]], ...]
os: module
string_types: Tuple[Type[str]]
sys: module
text_streams: Dict[str, Callable]
text_type: Type[str]

_TKeepOpenFile = TypeVar('_TKeepOpenFile', bound=KeepOpenFile)
_TLazyFile = TypeVar('_TLazyFile', bound=LazyFile)

class KeepOpenFile:
    _file: Any
    def __enter__(self: _TKeepOpenFile) -> _TKeepOpenFile: ...
    def __exit__(self, exc_type, exc_value, tb) -> None: ...
    def __getattr__(self, name) -> Any: ...
    def __init__(self, file) -> None: ...
    def __iter__(self) -> Any: ...
    def __repr__(self) -> str: ...

class LazyFile:
    __doc__: str
    _f: Any
    atomic: Any
    encoding: Any
    errors: Any
    mode: Any
    name: Any
    should_close: bool
    def __enter__(self: _TLazyFile) -> _TLazyFile: ...
    def __exit__(self, exc_type, exc_value, tb) -> None: ...
    def __getattr__(self, name) -> Any: ...
    def __init__(self, filename, mode = ..., encoding = ..., errors = ..., atomic = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __repr__(self) -> str: ...
    def close(self) -> None: ...
    def close_intelligently(self) -> None: ...
    def open(self) -> Any: ...

class PacifyFlushWrapper:
    __doc__: str
    wrapped: Any
    def __getattr__(self, attr) -> Any: ...
    def __init__(self, wrapped) -> None: ...
    def flush(self) -> None: ...

def _default_text_stderr() -> Any: ...
def _default_text_stdout() -> Any: ...
def _find_binary_writer(stream) -> Any: ...
def _posixify(name) -> str: ...
def echo(message = ..., file = ..., nl = ..., err = ..., color = ...) -> None: ...
def filename_to_ui(value) -> Any: ...
def format_filename(filename, shorten = ...) -> Any: ...
def get_app_dir(app_name, roaming = ..., force_posix = ...) -> str: ...
def get_binary_stream(name) -> Any: ...
def get_filesystem_encoding() -> str: ...
def get_os_args() -> Any: ...
def get_streerror(e, default = ...) -> Any: ...
def get_text_stream(name, encoding = ..., errors = ...) -> Any: ...
def is_bytes(x) -> bool: ...
def make_default_short_help(help, max_length = ...) -> str: ...
def make_str(value) -> Any: ...
def open_file(filename, mode = ..., encoding = ..., errors = ..., lazy = ..., atomic = ...) -> Any: ...
def open_stream(filename, mode = ..., encoding = ..., errors = ..., atomic = ...) -> Tuple[Any, bool]: ...
def resolve_color_default(color = ...) -> Any: ...
def safecall(func) -> Callable: ...
def should_strip_ansi(stream = ..., color = ...) -> bool: ...
def strip_ansi(value) -> str: ...
