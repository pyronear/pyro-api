# (generated with --quick)

from typing import Any, Callable, Dict, Optional, Pattern, Tuple, Type, TypeVar, Union
import weakref

APP_ENGINE: bool
CYGWIN: bool
DEFAULT_COLUMNS: int
MSYS2: bool
PY2: bool
WIN: bool
WeakKeyDictionary: Type[weakref.WeakKeyDictionary]
_ansi_re: Pattern[str]
_ansi_stream_wrappers: weakref.WeakKeyDictionary[nothing, nothing]
_can_replace: bool
_get_windows_console_stream: Any
_wrap_std_stream: Any
auto_wrap_for_ansi: Optional[Callable]
binary_streams: Dict[str, Callable[[], Any]]
codecs: module
colorama: Any
get_winterm_size: Optional[Callable[[], Any]]
int_types: Tuple[Type[int]]
io: module
os: module
range_type: Type[range]
re: module
string_types: Tuple[Type[str]]
sys: module
text_streams: Dict[str, Callable]
text_type: Type[str]

_T1 = TypeVar('_T1')
_T_AtomicFile = TypeVar('_T_AtomicFile', bound=_AtomicFile)

class _AtomicFile:
    _f: Any
    _real_filename: Any
    _tmp_filename: Any
    closed: bool
    name: Any
    def __enter__(self: _T_AtomicFile) -> _T_AtomicFile: ...
    def __exit__(self, exc_type, exc_value, tb) -> None: ...
    def __getattr__(self, name) -> Any: ...
    def __init__(self, f, tmp_filename, real_filename) -> None: ...
    def __repr__(self) -> str: ...
    def close(self, delete = ...) -> None: ...

class _FixupStream:
    __doc__: str
    _force_readable: Any
    _force_writable: Any
    _stream: Any
    def __getattr__(self, name) -> Any: ...
    def __init__(self, stream, force_readable = ..., force_writable = ...) -> None: ...
    def read1(self, size) -> Any: ...
    def readable(self) -> Any: ...
    def seekable(self) -> Any: ...
    def writable(self) -> Any: ...

class _NonClosingTextIOWrapper(io.TextIOWrapper):
    _stream: _FixupStream
    def __del__(self) -> None: ...
    def __init__(self, stream, encoding, errors, force_readable = ..., force_writable = ..., **extra) -> None: ...
    def isatty(self) -> Any: ...
    def write(self, x) -> Any: ...
    def writelines(self, lines) -> None: ...

def _default_text_stderr() -> Any: ...
def _default_text_stdin() -> Any: ...
def _default_text_stdout() -> Any: ...
def _find_binary_reader(stream) -> Any: ...
def _find_binary_writer(stream) -> Any: ...
def _force_correct_text_reader(text_reader, encoding, errors, force_readable = ...) -> Any: ...
def _force_correct_text_stream(text_stream, encoding, errors, is_binary, find_binary, force_readable = ..., force_writable = ...) -> Any: ...
def _force_correct_text_writer(text_writer, encoding, errors, force_writable = ...) -> Any: ...
def _get_argv_encoding() -> Any: ...
def _is_binary_reader(stream, default: _T1 = ...) -> Union[bool, _T1]: ...
def _is_binary_writer(stream, default: _T1 = ...) -> Union[bool, _T1]: ...
def _is_compat_stream_attr(stream, attr, value) -> Any: ...
def _is_compatible_text_stream(stream, encoding, errors) -> Any: ...
def _is_jupyter_kernel_output(stream) -> Any: ...
def _make_cached_stream_func(src_func, wrapper_func) -> Callable[[], Any]: ...
def _make_text_stream(stream, encoding, errors, force_readable = ..., force_writable = ...) -> _NonClosingTextIOWrapper: ...
def _replace(src: Union[_PathLike, bytes, str], dst: Union[_PathLike, bytes, str], *, src_dir_fd: Optional[int] = ..., dst_dir_fd: Optional[int] = ...) -> None: ...
def _stream_is_misconfigured(stream) -> Any: ...
def _wrap_io_open(file, mode, encoding, errors) -> Any: ...
def filename_to_ui(value) -> Any: ...
def get_best_encoding(stream) -> Any: ...
def get_binary_stderr() -> Any: ...
def get_binary_stdin() -> Any: ...
def get_binary_stdout() -> Any: ...
def get_filesystem_encoding() -> str: ...
def get_streerror(e, default = ...) -> Any: ...
def get_text_stderr(encoding = ..., errors = ...) -> Any: ...
def get_text_stdin(encoding = ..., errors = ...) -> Any: ...
def get_text_stdout(encoding = ..., errors = ...) -> Any: ...
def is_ascii_encoding(encoding) -> bool: ...
def is_bytes(x) -> bool: ...
def isatty(stream) -> Any: ...
def isidentifier(x) -> Any: ...
def iteritems(x) -> Any: ...
def open_stream(filename, mode = ..., encoding = ..., errors = ..., atomic = ...) -> Tuple[Any, bool]: ...
def raw_input(prompt: str = ...) -> str: ...
def should_strip_ansi(stream = ..., color = ...) -> bool: ...
def strip_ansi(value) -> str: ...
def term_len(x) -> int: ...
