# (generated with --quick)

import click._termui_impl
import click.exceptions
import click.types
import click.utils
import contextlib
from typing import Any, Callable, Dict, Optional, Tuple, Type, TypeVar, Union

Abort: Type[click.exceptions.Abort]
Choice: Type[click.types.Choice]
DEFAULT_COLUMNS: int
LazyFile: Type[click.utils.LazyFile]
Path: Type[click.types.Path]
UsageError: Type[click.exceptions.UsageError]
WIN: bool
_ansi_colors: Dict[str, int]
_ansi_reset_all: str
_getchar: None
get_winterm_size: Optional[Callable[[], Any]]
inspect: module
io: module
itertools: module
os: module
string_types: Tuple[Type[str]]
struct: module
sys: module
text_type: Type[str]

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')

def _build_prompt(text, suffix, show_default = ..., default = ..., show_choices = ..., type = ...) -> Any: ...
def _format_default(default) -> Any: ...
def clear() -> None: ...
def confirm(text, default: _T1 = ..., abort = ..., prompt_suffix = ..., show_default = ..., err = ...) -> Union[bool, _T1]: ...
def convert_type(ty: _T0, default: _T1 = ...) -> Any: ...
def echo(message = ..., file = ..., nl = ..., err = ..., color = ...) -> None: ...
def echo_via_pager(text_or_generator, color = ...) -> Any: ...
def edit(text = ..., editor = ..., env = ..., require_save = ..., extension = ..., filename = ...) -> Optional[str]: ...
def get_terminal_size() -> Any: ...
def getchar(echo = ...) -> Any: ...
def hidden_prompt_func(prompt) -> str: ...
def isatty(stream) -> Any: ...
def launch(url, wait = ..., locate = ...) -> int: ...
def pause(info = ..., err = ...) -> None: ...
def progressbar(iterable = ..., length = ..., label = ..., show_eta = ..., show_percent = ..., show_pos = ..., item_show_func = ..., fill_char = ..., empty_char = ..., bar_template = ..., info_sep = ..., width = ..., file = ..., color = ...) -> click._termui_impl.ProgressBar: ...
def prompt(text, default = ..., hide_input = ..., confirmation_prompt = ..., type = ..., value_proc = ..., prompt_suffix = ..., show_default = ..., err = ..., show_choices = ...) -> Any: ...
def raw_input(prompt: str = ...) -> str: ...
def raw_terminal() -> contextlib._GeneratorContextManager: ...
def resolve_color_default(color = ...) -> Any: ...
def secho(message = ..., file = ..., nl = ..., err = ..., color = ..., **styles) -> None: ...
def strip_ansi(value) -> str: ...
def style(text, fg = ..., bg = ..., bold = ..., dim = ..., underline = ..., blink = ..., reverse = ..., reset = ...) -> str: ...
def unstyle(text) -> str: ...
def visible_prompt_func(prompt: str = ...) -> str: ...
