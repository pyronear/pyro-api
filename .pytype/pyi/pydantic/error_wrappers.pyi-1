# (generated with --quick)

from typing import Any, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union

Loc = Tuple[Union[int, str], ...]

BaseConfig: Any
ErrorList: Type[Union[ErrorWrapper, Sequence]]
ModelOrDc: Any
ReprArgs: Any
Representation: Any
_EXC_TYPE_CACHE: Dict[Type[Exception], str]
__all__: Tuple[str, str]
json: module
pydantic_encoder: Any

class ErrorWrapper(Any):
    __slots__ = ["_loc", "exc"]
    _loc: Union[str, Tuple[Union[int, str], ...]]
    exc: Exception
    def __init__(self, exc: Exception, loc: Union[str, Tuple[Union[int, str], ...]]) -> None: ...
    def __repr_args__(self) -> Any: ...
    def loc_tuple(self) -> Tuple[Union[int, str], ...]: ...

class ValidationError(Any, ValueError):
    __slots__ = ["_error_cache", "model", "raw_errors"]
    _error_cache: None
    model: Any
    raw_errors: Sequence[Union[ErrorWrapper, Sequence]]
    def __init__(self, errors: Sequence[Union[ErrorWrapper, Sequence]], model) -> None: ...
    def __repr_args__(self) -> Any: ...
    def __str__(self) -> str: ...
    def errors(self) -> List[Dict[str, Any]]: ...
    def json(self, *, indent: Optional[Union[int, str]] = ...) -> str: ...

def _display_error_loc(error: Dict[str, Any]) -> str: ...
def _display_error_type_and_ctx(error: Dict[str, Any]) -> str: ...
def _get_exc_type(cls: Type[Exception]) -> str: ...
def display_errors(errors: List[Dict[str, Any]]) -> str: ...
def error_dict(exc: Exception, config: type, loc: Tuple[Union[int, str], ...]) -> Dict[str, Any]: ...
def flatten_errors(errors: Sequence, config: type, loc: Optional[Tuple[Union[int, str], ...]] = ...) -> Generator[Dict[str, Any], None, None]: ...
def get_exc_type(cls: Type[Exception]) -> str: ...
