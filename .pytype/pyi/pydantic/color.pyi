# (generated with --quick)

import pydantic.errors
import pydantic.utils
from typing import Any, Dict, Optional, Set, Tuple, Type, Union

COLORS_BY_NAME: Dict[str, Any]
COLORS_BY_VALUE: Dict[Any, str]
CallableGenerator: Any
ColorError: Type[pydantic.errors.ColorError]
ColorTuple: Type[Tuple[Union[float, int], ...]]
ColorType: Type[Union[str, Tuple[Union[float, int], ...]]]
HslColorTuple: Type[Tuple[float, ...]]
ReprArgs: Any
Representation: Type[pydantic.utils.Representation]
_r_255: str
_r_alpha: str
_r_comma: str
_r_h: str
_r_sl: str
math: module
r_hex_long: str
r_hex_short: str
r_hsl: str
r_hsla: str
r_rgb: str
r_rgba: str
rads: float
re: module
repeat_colors: Set[int]

class Color(pydantic.utils.Representation):
    __slots__ = ["_original", "_rgba"]
    _original: Union[str, Tuple[Union[float, int], ...]]
    _rgba: Any
    @classmethod
    def __get_validators__(cls) -> Any: ...
    def __init__(self, value: Union[str, Tuple[float, ...]]) -> None: ...
    @classmethod
    def __modify_schema__(cls, field_schema: Dict[str, Any]) -> None: ...
    def __repr_args__(self) -> Any: ...
    def __str__(self) -> str: ...
    def _alpha_float(self) -> float: ...
    def as_hex(self) -> str: ...
    def as_hsl(self) -> str: ...
    def as_hsl_tuple(self, *, alpha: bool = ...) -> Tuple[float, ...]: ...
    def as_named(self, *, fallback: bool = ...) -> str: ...
    def as_rgb(self) -> str: ...
    def as_rgb_tuple(self, *, alpha: bool = ...) -> Tuple[Union[float, int], ...]: ...
    def original(self) -> Union[str, Tuple[Union[float, int], ...]]: ...

class RGBA:
    __slots__ = ["_tuple", "alpha", "b", "g", "r"]
    __doc__: str
    _tuple: Tuple[float, float, float, Optional[float]]
    alpha: Optional[float]
    b: float
    g: float
    r: float
    def __getitem__(self, item) -> Any: ...
    def __init__(self, r: float, g: float, b: float, alpha: Optional[float]) -> None: ...

def almost_equal_floats(value_1: float, value_2: float, *, delta: float = ...) -> bool: ...
def float_to_255(c: float) -> int: ...
def hls_to_rgb(h: float, l: float, s: float) -> Tuple[float, float, float]: ...
def ints_to_rgba(r: Union[int, str], g: Union[int, str], b: Union[int, str], alpha: Optional[float]) -> RGBA: ...
def parse_color_value(value: Union[int, str], max_val: int = ...) -> float: ...
def parse_float_alpha(value: Optional[Union[float, str]]) -> Optional[float]: ...
def parse_hsl(h: str, h_units: str, sat: str, light: str, alpha: Optional[float] = ...) -> RGBA: ...
def parse_str(value: str) -> RGBA: ...
def parse_tuple(value: tuple) -> RGBA: ...
def rgb_to_hls(r: float, g: float, b: float) -> Tuple[float, float, float]: ...
