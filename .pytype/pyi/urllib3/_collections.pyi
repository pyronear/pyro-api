# (generated with --quick)

import __future__
import collections
import typing
from typing import Any, Generator, List, NoReturn, Tuple, Type, TypeVar, Union
import urllib3.exceptions

InvalidHeader: Type[urllib3.exceptions.InvalidHeader]
Mapping: Type[typing.Mapping]
MutableMapping: Type[typing.MutableMapping]
OrderedDict: Type[collections.OrderedDict]
PY3: bool
RLock: type
_Null: Any
__all__: List[str]
absolute_import: __future__._Feature

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')
_T2 = TypeVar('_T2')
_T3 = TypeVar('_T3')
_THTTPHeaderDict = TypeVar('_THTTPHeaderDict', bound=HTTPHeaderDict)

class HTTPHeaderDict(typing.MutableMapping):
    _HTTPHeaderDict__marker: Any
    __doc__: str
    _container: collections.OrderedDict[Any, list]
    iterkeys: Any
    itervalues: Any
    def __contains__(self, key) -> bool: ...
    def __delitem__(self, key) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __getitem__(self, key) -> str: ...
    def __init__(self, headers = ..., **kwargs) -> None: ...
    def __iter__(self) -> Generator[nothing, Any, None]: ...
    def __len__(self) -> int: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, key: _T0, val: _T1) -> List[Union[_T0, _T1]]: ...
    def _copy_from(self, other) -> None: ...
    def add(self, key, val) -> None: ...
    def copy(self: _THTTPHeaderDict) -> _THTTPHeaderDict: ...
    def discard(self, key) -> None: ...
    def extend(self, *args, **kwargs) -> None: ...
    @classmethod
    def from_httplib(cls: Type[_THTTPHeaderDict], message) -> _THTTPHeaderDict: ...
    @overload
    def get_all(self, key, default = ...) -> Any: ...
    @overload
    def get_all(self, key, default: _T1 = ...) -> Union[list, _T1]: ...
    @overload
    def getallmatchingheaders(self, key, default = ...) -> Any: ...
    @overload
    def getallmatchingheaders(self, key, default: _T1 = ...) -> Union[list, _T1]: ...
    @overload
    def getheaders(self, key, default = ...) -> Any: ...
    @overload
    def getheaders(self, key, default: _T1 = ...) -> Union[list, _T1]: ...
    @overload
    def getlist(self, key, default = ...) -> Any: ...
    @overload
    def getlist(self, key, default: _T1 = ...) -> Union[list, _T1]: ...
    @overload
    def iget(self, key, default = ...) -> Any: ...
    @overload
    def iget(self, key, default: _T1 = ...) -> Union[list, _T1]: ...
    def items(self) -> list: ...
    def iteritems(self) -> Generator[Tuple[Any, Any], Any, None]: ...
    def itermerged(self) -> Generator[Tuple[Any, str], Any, None]: ...
    def pop(self, key, default = ...) -> Any: ...

class RecentlyUsedContainer(typing.MutableMapping):
    ContainerCls: Type[collections.OrderedDict]
    __doc__: str
    _container: collections.OrderedDict
    _maxsize: Any
    lock: Any
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self, maxsize = ..., dispose_func = ...) -> None: ...
    def __iter__(self) -> NoReturn: ...
    def __len__(self) -> int: ...
    def __setitem__(self, key, value) -> None: ...
    def clear(self) -> None: ...
    def dispose_func(self, _1) -> Any: ...
    def keys(self) -> list: ...

def iterkeys(d, **kw) -> Any: ...
def itervalues(d, **kw) -> Any: ...
