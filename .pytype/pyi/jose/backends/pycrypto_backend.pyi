# (generated with --quick)

import Crypto.PublicKey.RSA
import Crypto.Util.asn1
import jose.backends.base
import jose.constants
import jose.exceptions
from typing import Any, Dict, Optional, Type, TypeVar

ALGORITHMS: jose.constants.Algorithms
Crypto: module
DerSequence: Type[Crypto.Util.asn1.DerSequence]
JWKError: Type[jose.exceptions.JWKError]
Key: Type[jose.backends.base.Key]
PKCS1_v1_5: module
RSA: module
_RSAKey: Type[Crypto.PublicKey.RSA._RSAobj]
six: module
warnings: module

_TRSAKey = TypeVar('_TRSAKey', bound=RSAKey)

class RSAKey(jose.backends.base.Key):
    SHA256: module
    SHA384: module
    SHA512: module
    __doc__: str
    _algorithm: Any
    hash_alg: Optional[module]
    prepared_key: Any
    def __init__(self, key, algorithm) -> None: ...
    def _process_cert(self, key) -> None: ...
    def _process_jwk(self, jwk_dict) -> Any: ...
    def is_public(self) -> bool: ...
    def public_key(self: _TRSAKey) -> _TRSAKey: ...
    def sign(self, msg) -> Any: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_pem(self, pem_format = ...) -> Any: ...
    def verify(self, msg, sig) -> Any: ...

def _der_to_pem(der_key, marker) -> bytes: ...
def b64encode(s: bytes, altchars: Optional[bytes] = ...) -> bytes: ...
def base64_to_long(data) -> Any: ...
def base64url_decode(input) -> bytes: ...
def long_to_base64(data, size = ...) -> bytes: ...
def rsa_public_key_pkcs8_to_pkcs1(pkcs8_key) -> Any: ...
