# (generated with --quick)

import __future__
import cryptography.exceptions
import jose.backends.base
import jose.constants
import jose.exceptions
from typing import Any, Callable, Dict, Tuple, Type, TypeVar

ALGORITHMS: jose.constants.Algorithms
InvalidSignature: Type[cryptography.exceptions.InvalidSignature]
JWKError: Type[jose.exceptions.JWKError]
Key: Type[jose.backends.base.Key]
division: __future__._Feature
ec: module
hashes: module
int_from_bytes: Callable[..., int]
math: module
padding: module
rsa: module
serialization: module
six: module

_TCryptographyECKey = TypeVar('_TCryptographyECKey', bound=CryptographyECKey)
_TCryptographyRSAKey = TypeVar('_TCryptographyRSAKey', bound=CryptographyRSAKey)

class CryptographyECKey(jose.backends.base.Key):
    SHA256: Any
    SHA384: Any
    SHA512: Any
    _algorithm: Any
    cryptography_backend: Any
    hash_alg: Any
    prepared_key: Any
    def __init__(self, key, algorithm, cryptography_backend = ...) -> None: ...
    def _der_to_raw(self, der_signature) -> Any: ...
    def _process_jwk(self, jwk_dict) -> Any: ...
    def _raw_to_der(self, raw_signature) -> bytes: ...
    def _sig_component_length(self) -> int: ...
    def is_public(self) -> bool: ...
    def public_key(self: _TCryptographyECKey) -> _TCryptographyECKey: ...
    def sign(self, msg) -> Any: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_pem(self) -> Any: ...
    def verify(self, msg, sig) -> bool: ...

class CryptographyRSAKey(jose.backends.base.Key):
    SHA256: Any
    SHA384: Any
    SHA512: Any
    _algorithm: Any
    cryptography_backend: Any
    hash_alg: Any
    prepared_key: Any
    def __init__(self, key, algorithm, cryptography_backend = ...) -> None: ...
    def _process_cert(self, key) -> None: ...
    def _process_jwk(self, jwk_dict) -> Any: ...
    def is_public(self) -> bool: ...
    def public_key(self: _TCryptographyRSAKey) -> _TCryptographyRSAKey: ...
    def sign(self, msg) -> Any: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_pem(self, pem_format = ...) -> Any: ...
    def verify(self, msg, sig) -> bool: ...

def base64_to_long(data) -> Any: ...
def decode_dss_signature(signature) -> Tuple[Any, Any]: ...
def default_backend() -> Any: ...
def encode_dss_signature(r, s) -> bytes: ...
def int_to_bytes(integer, length = ...) -> Any: ...
def load_pem_private_key(data, password, backend = ...) -> Any: ...
def load_pem_public_key(data, backend = ...) -> Any: ...
def load_pem_x509_certificate(data, backend = ...) -> Any: ...
def long_to_base64(data, size = ...) -> bytes: ...
