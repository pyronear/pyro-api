# (generated with --quick)

import jose.constants
import jose.exceptions
import typing
from typing import Any, Tuple, Type

ALGORITHMS: jose.constants.Algorithms
Iterable: Type[typing.Iterable]
JWSError: Type[jose.exceptions.JWSError]
JWSSignatureError: Type[jose.exceptions.JWSSignatureError]
Mapping: Type[typing.Mapping]
binascii: module
json: module
jwk: module
six: module

def _encode_header(algorithm, additional_headers = ...) -> bytes: ...
def _encode_payload(payload) -> bytes: ...
def _get_keys(key) -> Any: ...
def _load(jwt) -> Tuple[Any, bytes, Any, bytes]: ...
def _sig_matches_keys(keys, signing_input, signature, alg) -> bool: ...
def _sign_header_and_claims(encoded_header, encoded_claims, algorithm, key_data) -> str: ...
def _verify_signature(signing_input, header, signature, key = ..., algorithms = ...) -> None: ...
def base64url_decode(input) -> bytes: ...
def base64url_encode(input) -> bytes: ...
def get_unverified_claims(token) -> Any: ...
def get_unverified_header(token) -> Any: ...
def get_unverified_headers(token) -> Any: ...
def sign(payload, key, headers = ..., algorithm = ...) -> Any: ...
def verify(token, key, algorithms, verify = ...) -> Any: ...
