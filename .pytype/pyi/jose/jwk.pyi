# (generated with --quick)

import jose.backends.base
import jose.backends.cryptography_backend
import jose.backends.ecdsa_backend
import jose.backends.pycrypto_backend
import jose.backends.rsa_backend
import jose.constants
import jose.exceptions
from typing import Any, Dict, Optional, Type, Union

ALGORITHMS: jose.constants.Algorithms
ECKey: Type[Union[jose.backends.cryptography_backend.CryptographyECKey, jose.backends.ecdsa_backend.ECDSAECKey]]
JWKError: Type[jose.exceptions.JWKError]
Key: Type[jose.backends.base.Key]
RSAKey: Type[Union[jose.backends.cryptography_backend.CryptographyRSAKey, jose.backends.pycrypto_backend.RSAKey, jose.backends.rsa_backend.RSAKey]]
hashlib: module
hmac: module
six: module

class HMACKey(jose.backends.base.Key):
    __doc__: str
    _algorithm: Any
    hash_alg: Any
    prepared_key: Any
    def SHA256(string: bytes = ...) -> hashlib._Hash: ...
    def SHA384(string: bytes = ...) -> hashlib._Hash: ...
    def SHA512(string: bytes = ...) -> hashlib._Hash: ...
    def __init__(self, key, algorithm) -> None: ...
    def _process_jwk(self, jwk_dict) -> bytes: ...
    def sign(self, msg) -> bytes: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def verify(self, msg, sig) -> bool: ...

def base64url_decode(input) -> bytes: ...
def base64url_encode(input) -> bytes: ...
def construct(key_data, algorithm = ...) -> Any: ...
def get_algorithm_object(algorithm) -> Any: ...
def get_key(algorithm) -> Optional[Type[Union[HMACKey, jose.backends.cryptography_backend.CryptographyECKey, jose.backends.cryptography_backend.CryptographyRSAKey, jose.backends.ecdsa_backend.ECDSAECKey, jose.backends.pycrypto_backend.RSAKey, jose.backends.rsa_backend.RSAKey]]]: ...
def register_key(algorithm, key_class) -> bool: ...
