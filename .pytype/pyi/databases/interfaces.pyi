# (generated with --quick)

from typing import Any, AsyncGenerator, Coroutine, List, Mapping, Optional

ClauseElement: Any
typing: module

class ConnectionBackend:
    raw_connection: Any
    def acquire(self) -> Coroutine[Any, Any, None]: ...
    def execute(self, query) -> coroutine: ...
    def execute_many(self, queries: list) -> Coroutine[Any, Any, None]: ...
    def fetch_all(self, query) -> Coroutine[Any, Any, List[Mapping]]: ...
    def fetch_one(self, query) -> Coroutine[Any, Any, Optional[Mapping]]: ...
    def iterate(self, query) -> AsyncGenerator[Mapping, None]: ...
    def release(self) -> Coroutine[Any, Any, None]: ...
    def transaction(self) -> TransactionBackend: ...

class DatabaseBackend:
    def connect(self) -> Coroutine[Any, Any, None]: ...
    def connection(self) -> ConnectionBackend: ...
    def disconnect(self) -> Coroutine[Any, Any, None]: ...

class TransactionBackend:
    def commit(self) -> Coroutine[Any, Any, None]: ...
    def rollback(self) -> Coroutine[Any, Any, None]: ...
    def start(self, is_root: bool) -> Coroutine[Any, Any, None]: ...
