# (generated with --quick)

import __future__
import attr._make
import attr.exceptions
from typing import Any, List, Type

NotCallableError: Type[attr.exceptions.NotCallableError]
_AndValidator: Any
_DeepIterable: Any
_DeepMapping: Any
_InValidator: Any
_InstanceOfValidator: Any
_IsCallableValidator: Any
_MatchesReValidator: Any
_OptionalValidator: Any
_ProvidesValidator: Any
__all__: List[str]
absolute_import: __future__._Feature
division: __future__._Feature
print_function: __future__._Feature
re: module

def and_(*validators) -> Any: ...
def attrib(default = ..., validator = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., metadata = ..., type = ..., converter = ..., factory = ..., kw_only = ..., eq = ..., order = ..., on_setattr = ...) -> attr._make._CountingAttr: ...
def attrs(maybe_cls = ..., these = ..., repr_ns = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ..., auto_exc = ..., eq = ..., order = ...) -> Any: ...
def deep_iterable(member_validator, iterable_validator = ...) -> Any: ...
def deep_mapping(key_validator, value_validator, mapping_validator = ...) -> Any: ...
def in_(options) -> Any: ...
def instance_of(type) -> Any: ...
def is_callable() -> Any: ...
def matches_re(regex, flags = ..., func = ...) -> Any: ...
def optional(validator) -> Any: ...
def provides(interface) -> Any: ...
