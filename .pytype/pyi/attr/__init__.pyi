# (generated with --quick)

import __future__
import attr._make
import functools
from typing import Any, Callable, List, Type, TypeVar, Union

Attribute: Type[attr._make.Attribute]
NOTHING: attr._make._Nothing
VersionInfo: Any
__all__: List[Union[str, Callable, functools.partial[nothing]]]
__author__: str
__copyright__: str
__description__: str
__email__: str
__license__: str
__title__: str
__uri__: str
__url__: str
__version__: str
__version_info__: Any
absolute_import: __future__._Feature
converters: Any
dataclass: functools.partial[nothing]
division: __future__._Feature
exceptions: Any
filters: Any
frozen: functools.partial[nothing]
partial: Type[functools.partial]
print_function: __future__._Feature
setters: module
sys: module
validators: Any

_T0 = TypeVar('_T0')

def Factory(factory: Callable[..., _T0], takes_self: bool = ...) -> _T0: ...
def asdict(inst, recurse = ..., filter = ..., dict_factory = ..., retain_collection_types = ...) -> Any: ...
def assoc(inst: _T0, **changes) -> _T0: ...
def astuple(inst, recurse = ..., filter = ..., tuple_factory = ..., retain_collection_types = ...) -> Any: ...
def attr(default = ..., validator = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., metadata = ..., type = ..., converter = ..., factory = ..., kw_only = ..., eq = ..., order = ..., on_setattr = ...) -> attr._make._CountingAttr: ...
def attrib(default = ..., validator = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., metadata = ..., type = ..., converter = ..., factory = ..., kw_only = ..., eq = ..., order = ..., on_setattr = ...) -> attr._make._CountingAttr: ...
def attributes(maybe_cls = ..., these = ..., repr_ns = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ..., auto_exc = ..., eq = ..., order = ...) -> Any: ...
def attrs(maybe_cls = ..., these = ..., repr_ns = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ..., auto_exc = ..., eq = ..., order = ...) -> Any: ...
def define(maybe_cls = ..., *, these = ..., repr = ..., hash = ..., init = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ..., auto_exc = ..., eq = ..., order = ..., auto_detect = ..., getstate_setstate = ..., on_setattr = ...) -> Any: ...
def evolve(inst, **changes) -> Any: ...
def field(*, default = ..., validator = ..., repr = ..., hash = ..., init = ..., metadata = ..., converter = ..., factory = ..., kw_only = ..., eq = ..., order = ..., on_setattr = ...) -> attr._make._CountingAttr: ...
def fields(cls) -> Any: ...
def fields_dict(cls) -> dict: ...
def get_run_validators() -> bool: ...
def has(cls) -> bool: ...
def ib(default = ..., validator = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., metadata = ..., type = ..., converter = ..., factory = ..., kw_only = ..., eq = ..., order = ..., on_setattr = ...) -> attr._make._CountingAttr: ...
def make_class(name, attrs, bases = ..., **attributes_arguments) -> Any: ...
def mutable(maybe_cls = ..., *, these = ..., repr = ..., hash = ..., init = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ..., auto_exc = ..., eq = ..., order = ..., auto_detect = ..., getstate_setstate = ..., on_setattr = ...) -> Any: ...
def resolve_types(cls, globalns = ..., localns = ...) -> Any: ...
def s(maybe_cls = ..., these = ..., repr_ns = ..., repr = ..., cmp = ..., hash = ..., init: bool = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ..., auto_exc = ..., eq = ..., order = ...) -> Any: ...
def set_run_validators(run) -> None: ...
def validate(inst) -> None: ...
