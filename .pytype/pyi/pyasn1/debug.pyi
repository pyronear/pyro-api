# (generated with --quick)

from typing import Any, Dict, List, Tuple, Type, TypeVar

DEBUG_ALL: int
DEBUG_DECODER: int
DEBUG_ENCODER: int
DEBUG_NONE: int
FLAG_MAP: Dict[str, int]
LOGGEE_MAP: Dict[module, Tuple[Any, Any]]
NullHandler: Type[logging.NullHandler]
_LOG: Any
__all__: List[str]
__version__: str
error: module
logging: module
scope: Scope
sys: module

_T0 = TypeVar('_T0')

class Debug:
    _flags: int
    _printer: Any
    defaultPrinter: Printer
    def __and__(self, flag) -> Any: ...
    def __call__(self, msg) -> None: ...
    def __init__(self, *flags, **options) -> None: ...
    def __rand__(self, flag) -> Any: ...
    def __str__(self) -> str: ...

class Printer:
    _Printer__logger: Any
    def __call__(self, msg) -> None: ...
    def __init__(self, logger = ..., handler = ..., formatter = ...) -> None: ...
    def __str__(self) -> str: ...

class Scope:
    _list: list
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
    def pop(self) -> Any: ...
    def push(self, token) -> None: ...

def hexdump(octets) -> str: ...
def octs2ints(x: _T0) -> _T0: ...
def registerLoggee(module, name = ..., flags = ...) -> int: ...
def setLogger(userLogger) -> None: ...
