# (generated with --quick)

from typing import Any, Generator, List, Tuple, TypeVar

__all__: List[str]
error: module
tagCategoryExplicit: int
tagCategoryImplicit: int
tagCategoryUntagged: int
tagClassApplication: int
tagClassContext: int
tagClassPrivate: int
tagClassUniversal: int
tagFormatConstructed: int
tagFormatSimple: int

_TTag = TypeVar('_TTag', bound=Tag)
_TTagSet = TypeVar('_TTagSet', bound=TagSet)

class Tag:
    _Tag__hash: int
    _Tag__tagClass: Any
    _Tag__tagClassId: Tuple[Any, Any]
    _Tag__tagFormat: Any
    _Tag__tagId: Any
    __doc__: str
    tagClass: Any
    tagFormat: Any
    tagId: Any
    def __and__(self: _TTag, otherTag) -> _TTag: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, idx) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, tagClass, tagFormat, tagId) -> None: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __or__(self: _TTag, otherTag) -> _TTag: ...
    def __repr__(self) -> str: ...

class TagSet:
    _TagSet__baseTag: Any
    _TagSet__hash: int
    _TagSet__lenOfSuperTags: int
    _TagSet__superTags: tuple
    _TagSet__superTagsClassId: tuple
    __doc__: str
    baseTag: Any
    superTags: Any
    def __add__(self: _TTagSet, superTag) -> _TTagSet: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, i) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, baseTag = ..., *superTags) -> None: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __radd__(self: _TTagSet, superTag) -> _TTagSet: ...
    def __repr__(self) -> str: ...
    def getBaseTag(self) -> Any: ...
    def isSuperTagSetOf(self, tagSet) -> bool: ...
    def tagExplicitly(self, superTag) -> Any: ...
    def tagImplicitly(self, superTag) -> Any: ...

def initTagSet(tag) -> TagSet: ...
