# (generated with --quick)

import pyasn1.type.constraint
import pyasn1.type.tag
import pyasn1.type.tagmap
from typing import Any, Dict, List, NoReturn, Set, Type, TypeVar

AbstractConstructedAsn1Item = ConstructedAsn1Type
AbstractSimpleAsn1Item = SimpleAsn1Type
Asn1ItemBase = Asn1Type

__all__: List[str]
calling: module
constraint: module
error: module
noValue: NoValue
sys: module
tag: module
tagmap: module

_T0 = TypeVar('_T0')
_TConstructedAsn1Type = TypeVar('_TConstructedAsn1Type', bound=ConstructedAsn1Type)
_TNoValue = TypeVar('_TNoValue', bound=NoValue)
_TSimpleAsn1Type = TypeVar('_TSimpleAsn1Type', bound=SimpleAsn1Type)

class Asn1Item:
    _typeCounter: Any
    @classmethod
    def getTypeId(cls, increment = ...) -> Any: ...

class Asn1Type(Asn1Item):
    __doc__: str
    _readOnly: Dict[str, Any]
    effectiveTagSet: Any
    readOnly: Any
    subtypeSpec: pyasn1.type.constraint.ConstraintsIntersection
    tagMap: pyasn1.type.tagmap.TagMap
    tagSet: pyasn1.type.tag.TagSet
    typeId: None
    def __init__(self, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __str__(self) -> Any: ...
    def getEffectiveTagSet(self) -> Any: ...
    def getSubtypeSpec(self) -> pyasn1.type.constraint.ConstraintsIntersection: ...
    def getTagMap(self) -> Any: ...
    def getTagSet(self) -> pyasn1.type.tag.TagSet: ...
    def hasValue(self) -> Any: ...
    @staticmethod
    def isNoValue(*values) -> bool: ...
    def isSameTypeWith(self, other, matchTags = ..., matchConstraints = ...) -> Any: ...
    def isSuperTypeOf(self, other, matchTags = ..., matchConstraints = ...) -> Any: ...
    def prettyPrint(self, scope = ...) -> NoReturn: ...

class ConstructedAsn1Type(Asn1Type):
    __doc__: str
    _readOnly: dict
    componentType: None
    sizeSpec: pyasn1.type.constraint.ConstraintsIntersection
    strictConstraints: bool
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __init__(self, **kwargs) -> None: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __repr__(self) -> str: ...
    def _cloneComponentValues(self, myClone, cloneValueFlag) -> None: ...
    def _moveSizeSpec(self, **kwargs) -> Dict[str, Any]: ...
    def clone(self: _TConstructedAsn1Type, **kwargs) -> _TConstructedAsn1Type: ...
    def getComponentByPosition(self, idx) -> NoReturn: ...
    def getComponentType(self) -> Any: ...
    def setComponentByPosition(self, idx, value, verifyConstraints = ...) -> NoReturn: ...
    def setComponents(self: _TConstructedAsn1Type, *args, **kwargs) -> _TConstructedAsn1Type: ...
    def setDefaultComponents(self) -> None: ...
    def subtype(self: _TConstructedAsn1Type, **kwargs) -> _TConstructedAsn1Type: ...
    def verifySizeSpec(self) -> None: ...

class NoValue:
    __doc__: str
    _instance: NoValue
    skipMethods: Set[str]
    def __getattr__(self, attr) -> NoReturn: ...
    def __new__(cls: Type[_TNoValue]) -> _TNoValue: ...
    def __repr__(self) -> str: ...

class SimpleAsn1Type(Asn1Type):
    __doc__: str
    _readOnly: dict
    _value: Any
    defaultValue: NoValue
    isValue: bool
    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> int: ...
    def __init__(self, value = ..., **kwargs) -> None: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __repr__(self) -> str: ...
    def clone(self: _TSimpleAsn1Type, value = ..., **kwargs) -> _TSimpleAsn1Type: ...
    def prettyIn(self, value: _T0) -> _T0: ...
    def prettyOut(self, value) -> str: ...
    def prettyPrint(self, scope = ...) -> Any: ...
    def prettyPrintType(self, scope = ...) -> str: ...
    def subtype(self: _TSimpleAsn1Type, value = ..., **kwargs) -> _TSimpleAsn1Type: ...
