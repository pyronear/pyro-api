# (generated with --quick)

from typing import Any, Dict, List, Tuple, TypeVar

__all__: List[str]
error: module
sys: module
tag: module
tagmap: module

_TNamedTypes = TypeVar('_TNamedTypes', bound=NamedTypes)

class DefaultedNamedType(NamedType):
    _NamedType__name: Any
    _NamedType__nameAndType: Tuple[Any, Any]
    _NamedType__openType: Any
    _NamedType__type: Any
    __doc__: str
    isDefaulted: bool

class NamedType:
    _NamedType__name: Any
    _NamedType__nameAndType: Tuple[Any, Any]
    _NamedType__openType: Any
    _NamedType__type: Any
    __doc__: str
    asn1Object: Any
    isDefaulted: bool
    isOptional: bool
    name: Any
    openType: Any
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, idx) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, name, asn1Object, openType = ...) -> None: ...
    def __iter__(self) -> tupleiterator: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def getName(self) -> Any: ...
    def getType(self) -> Any: ...

class NamedTypes:
    PostponedError: type
    _NamedTypes__ambiguousTypes: Any
    _NamedTypes__hasOpenTypes: Any
    _NamedTypes__hasOptionalOrDefault: Any
    _NamedTypes__items: tuple
    _NamedTypes__keys: frozenset
    _NamedTypes__minTagSet: Any
    _NamedTypes__nameToPosMap: Any
    _NamedTypes__namedTypes: tuple
    _NamedTypes__namedTypesLen: int
    _NamedTypes__nonUniqueTagMap: Any
    _NamedTypes__requiredComponents: frozenset
    _NamedTypes__tagToPosMap: Any
    _NamedTypes__uniqueTagMap: Any
    _NamedTypes__values: tuple
    __doc__: str
    hasOpenTypes: Any
    hasOptionalOrDefault: Any
    minTagSet: Any
    namedTypes: tuple
    requiredComponents: Any
    tagMap: Any
    tagMapUnique: Any
    def _NamedTypes__computeAmbiguousTypes(self) -> Dict[int, NamedTypes]: ...
    def _NamedTypes__computeMinTagSet(self) -> Any: ...
    def _NamedTypes__computeNameToPosMap(self) -> Any: ...
    def _NamedTypes__computeTagMaps(self, unique) -> Any: ...
    def _NamedTypes__computeTagToPosMap(self) -> Any: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, key) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, idx) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, *namedTypes, **kwargs) -> None: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def clone(self: _TNamedTypes) -> _TNamedTypes: ...
    def getNameByPosition(self, idx) -> Any: ...
    def getPositionByName(self, name) -> Any: ...
    def getPositionByType(self, tagSet) -> Any: ...
    def getPositionNearType(self, tagSet, idx) -> Any: ...
    def getTagMapNearPosition(self, idx) -> Any: ...
    def getTypeByPosition(self, idx) -> Any: ...
    def items(self) -> tuple: ...
    def keys(self) -> frozenset: ...
    def values(self) -> tuple: ...

class OptionalNamedType(NamedType):
    _NamedType__name: Any
    _NamedType__nameAndType: Tuple[Any, Any]
    _NamedType__openType: Any
    _NamedType__type: Any
    __doc__: str
    isOptional: bool

def any(x) -> bool: ...
