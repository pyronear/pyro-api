# (generated with --quick)

import __future__
from typing import Any, Callable, List, Optional, Sequence, Type

PY3: bool
__all__: List[str]
absolute_import: __future__._Feature
division: __future__._Feature
log: logging.Logger
logging: module
print_function: __future__._Feature
types: module

class classproperty:
    __doc__: str
    __func__: Any
    def __get__(self, obj, cls) -> Any: ...
    def __init__(self, func) -> None: ...
    def im_func(self, _1) -> Any: ...

class hybrid_method:
    __doc__: str
    func: Any
    def __get__(self, obj, cls) -> types.MethodType: ...
    def __init__(self, func) -> None: ...

class memoized_property:
    __doc__: Any
    im_func: Any
    def __func__(self, _1) -> Any: ...
    def __get__(self, obj, cls) -> Any: ...
    def __init__(self, func) -> None: ...
    def clear_cache(self, obj) -> None: ...
    def peek_cache(self, obj, default = ...) -> Any: ...

def deprecated_function(msg = ..., deprecated = ..., removed = ..., updoc = ..., replacement = ..., _is_method = ..., func_module = ...) -> Callable[[Any], Any]: ...
def deprecated_method(msg = ..., deprecated = ..., removed = ..., updoc = ..., replacement = ...) -> Any: ...
def memoize_single_value(func) -> Callable: ...
def update_wrapper(wrapper: Callable, wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable: ...
@overload
def warn(message: Warning, category = ..., stacklevel: int = ..., source = ...) -> None: ...
@overload
def warn(message: str, category: Optional[Type[Warning]] = ..., stacklevel: int = ..., source = ...) -> None: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
