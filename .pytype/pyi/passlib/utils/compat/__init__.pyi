# (generated with --quick)

from typing import Any, Callable, Iterable, Iterator, List, Tuple, Type, TypeVar

JYTHON: bool
ModuleType: Type[module]
PY2: bool
PY26: bool
PY3: bool
PYPY: bool
PYSTON: bool
__all__: List[str]
_lazy_attrs: dict
builtins: module
int_types: Tuple[Type[int]]
irange: Type[range]
join_byte_elems: Type[bytes]
join_byte_values: Type[bytes]
log: logging.Logger
logging: module
method_function_attr: str
native_string_types: Tuple[Type[str]]
nullcontext: Callable
num_types: Tuple[Type[int], Type[float]]
print_: Any
sys: module
unicode: Type[str]
unicode_or_bytes: Tuple[Type[str], Type[bytes]]
unicode_or_bytes_types: Tuple[Type[str], Type[bytes]]
unicode_or_str: Tuple[Type[str]]

_T = TypeVar('_T')
_T0 = TypeVar('_T0')
_T2 = TypeVar('_T2')
_T_LazyOverlayModule = TypeVar('_T_LazyOverlayModule', bound=_LazyOverlayModule)

class _LazyOverlayModule(module):
    _LazyOverlayModule__attrmap: Any
    _LazyOverlayModule__log: logging.Logger
    _LazyOverlayModule__proxy: Any
    __doc__: str
    def __dir__(self) -> list: ...
    def __getattr__(self, attr) -> Any: ...
    def __init__(self, name, attrmap, proxy = ...) -> None: ...
    def __repr__(self) -> str: ...
    @classmethod
    def replace_module(cls: Type[_T_LazyOverlayModule], name, attrmap) -> _T_LazyOverlayModule: ...

def _import_object(source) -> Any: ...
def add_doc(obj, doc) -> None: ...
def bascii_to_str(s) -> Any: ...
def byte_elem_value(elem: _T0) -> _T0: ...
def error_from(exc: _T0, cause = ...) -> _T0: ...
def get_method_function(func) -> Any: ...
def get_unbound_method_function(func) -> Any: ...
@overload
def imap(function, *sequences: Iterable[nothing]) -> Iterator[nothing]: ...
@overload
def imap(function: Callable[..., _T], *sequences: Iterable) -> Iterator[_T]: ...
def iter_byte_chars(s) -> Any: ...
def iter_byte_values(s: _T0) -> _T0: ...
def iteritems(d) -> Any: ...
def itervalues(d) -> Any: ...
@overload
def izip() -> Iterator[nothing]: ...
@overload
def izip(seq1, seq2, seq3, *seqs: Iterable) -> Iterator[tuple]: ...
@overload
def izip(seq1: Iterable, seq2: Iterable[nothing]) -> Iterator[nothing]: ...
@overload
def izip(seq1: Iterable[nothing], seq2: Iterable) -> Iterator[nothing]: ...
@overload
def izip(seq1: Iterable[_T]) -> Iterator[Tuple[_T]]: ...
@overload
def izip(seq1: Iterable[_T], seq2: Iterable[_T2]) -> Iterator[Tuple[_T, _T2]]: ...
def join_bytes(iterable: Iterable[bytes]) -> bytes: ...
def join_unicode(iterable: Iterable[str]) -> str: ...
def lmap(*a, **k) -> list: ...
def nextgetter(obj) -> Any: ...
def str_to_bascii(s) -> Any: ...
def str_to_uascii(s: _T0) -> _T0: ...
def suppress_cause(exc: _T0, cause = ...) -> _T0: ...
def u(s: _T0) -> _T0: ...
def uascii_to_str(s: _T0) -> _T0: ...
