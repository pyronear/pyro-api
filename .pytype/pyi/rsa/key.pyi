# (generated with --quick)

from typing import Callable, List, Mapping, Tuple

DEFAULT_EXPONENT: int
__all__: List[str]
count: int
doctest: module
failures: int
log: logging.Logger
logging: module
rsa: module
tests: int
typing: module
warnings: module

class AbstractKey:
    __slots__ = ["e", "n"]
    __doc__: str
    e: int
    n: int
    def __init__(self, n: int, e: int) -> None: ...
    @staticmethod
    def _assert_format_exists(file_format: str, methods: Mapping[str, Callable]) -> Callable: ...
    @classmethod
    def _load_pkcs1_der(cls, keyfile: bytes) -> AbstractKey: ...
    @classmethod
    def _load_pkcs1_pem(cls, keyfile: bytes) -> AbstractKey: ...
    def _save_pkcs1_der(self) -> bytes: ...
    def _save_pkcs1_pem(self) -> bytes: ...
    def blind(self, message: int, r: int) -> int: ...
    @classmethod
    def load_pkcs1(cls, keyfile: bytes, format: str = ...) -> AbstractKey: ...
    def save_pkcs1(self, format: str = ...) -> bytes: ...
    def unblind(self, blinded: int, r: int) -> int: ...

class PrivateKey(AbstractKey):
    __slots__ = ["coef", "d", "e", "exp1", "exp2", "n", "p", "q"]
    __doc__: str
    coef: int
    d: int
    e: int
    exp1: int
    exp2: int
    n: int
    p: int
    q: int
    def __eq__(self, other) -> bool: ...
    def __getitem__(self, key: str) -> int: ...
    def __getstate__(self) -> Tuple[int, int, int, int, int, int, int, int]: ...
    def __hash__(self) -> int: ...
    def __init__(self, n: int, e: int, d: int, p: int, q: int) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: Tuple[int, int, int, int, int, int, int, int]) -> None: ...
    def _get_blinding_factor(self) -> int: ...
    @classmethod
    def _load_pkcs1_der(cls, keyfile: bytes) -> PrivateKey: ...
    @classmethod
    def _load_pkcs1_pem(cls, keyfile: bytes) -> PrivateKey: ...
    def _save_pkcs1_der(self) -> bytes: ...
    def _save_pkcs1_pem(self) -> bytes: ...
    def blinded_decrypt(self, encrypted: int) -> int: ...
    def blinded_encrypt(self, message: int) -> int: ...

class PublicKey(AbstractKey):
    __slots__ = ["e", "n"]
    __doc__: str
    e: int
    n: int
    def __eq__(self, other) -> bool: ...
    def __getitem__(self, key: str) -> int: ...
    def __getstate__(self) -> Tuple[int, int]: ...
    def __hash__(self) -> int: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: Tuple[int, int]) -> None: ...
    @classmethod
    def _load_pkcs1_der(cls, keyfile: bytes) -> PublicKey: ...
    @classmethod
    def _load_pkcs1_pem(cls, keyfile: bytes) -> PublicKey: ...
    def _save_pkcs1_der(self) -> bytes: ...
    def _save_pkcs1_pem(self) -> bytes: ...
    @classmethod
    def load_pkcs1_openssl_der(cls, keyfile: bytes) -> PublicKey: ...
    @classmethod
    def load_pkcs1_openssl_pem(cls, keyfile: bytes) -> PublicKey: ...

def calculate_keys(p: int, q: int) -> Tuple[int, int]: ...
def calculate_keys_custom_exponent(p: int, q: int, exponent: int) -> Tuple[int, int]: ...
def find_p_q(nbits: int, getprime_func: Callable[[int], int] = ..., accurate: bool = ...) -> Tuple[int, int]: ...
def gen_keys(nbits: int, getprime_func: Callable[[int], int], accurate: bool = ..., exponent: int = ...) -> Tuple[int, int, int, int]: ...
def newkeys(nbits: int, accurate: bool = ..., poolsize: int = ..., exponent: int = ...) -> Tuple[PublicKey, PrivateKey]: ...
