# (generated with --quick)

import rsa.key
import rsa.pkcs1
from typing import BinaryIO, List, Tuple, Type, Union

DecryptionError: Type[rsa.pkcs1.DecryptionError]
PrivateKey: Type[rsa.key.PrivateKey]
PublicKey: Type[rsa.key.PublicKey]
VerificationError: Type[rsa.pkcs1.VerificationError]
__all__: List[str]
__author__: str
__date__: str
__version__: str
doctest: module

def compute_hash(message: Union[bytes, BinaryIO], method_name: str) -> bytes: ...
def decrypt(crypto: bytes, priv_key: rsa.key.PrivateKey) -> bytes: ...
def encrypt(message: bytes, pub_key: rsa.key.PublicKey) -> bytes: ...
def find_signature_hash(signature: bytes, pub_key: rsa.key.PublicKey) -> str: ...
def newkeys(nbits: int, accurate: bool = ..., poolsize: int = ..., exponent: int = ...) -> Tuple[rsa.key.PublicKey, rsa.key.PrivateKey]: ...
def sign(message: bytes, priv_key: rsa.key.PrivateKey, hash_method: str) -> bytes: ...
def sign_hash(hash_value: bytes, priv_key: rsa.key.PrivateKey, hash_method: str) -> bytes: ...
def verify(message: bytes, signature: bytes, pub_key: rsa.key.PublicKey) -> str: ...
