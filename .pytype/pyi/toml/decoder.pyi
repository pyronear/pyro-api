# (generated with --quick)

import toml.tz
from typing import Any, Dict, List, Optional, Pattern, Tuple, Type, TypeVar, Union

FNFError: Type[OSError]
TIME_RE: Pattern[str]
TomlTz: Type[toml.tz.TomlTz]
_escape_to_escapedchars: Dict[str, str]
_escapedchars: List[str]
_escapes: List[str]
_groupname_re: Pattern[str]
_number_with_underscores: Pattern[str]
_range: Type[range]
basestring: Type[str]
datetime: module
io: module
linesep: str
re: module
sys: module
unicode: Type[str]

_T0 = TypeVar('_T0')
_T3 = TypeVar('_T3')

class CommentValue:
    _dict: Any
    comment: str
    val: Any
    def __getitem__(self, key) -> Any: ...
    def __init__(self, val, comment, beginline, _dict) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def dump(self, dump_value_func) -> str: ...

class InlineTableDict:
    __doc__: str

class TomlDecodeError(ValueError):
    __doc__: str
    colno: Any
    doc: Any
    lineno: Any
    msg: Any
    pos: Any
    def __init__(self, msg, doc, pos) -> None: ...

class TomlDecoder:
    _dict: Any
    def __init__(self, _dict = ...) -> None: ...
    def _get_split_on_quotes(self, line) -> list: ...
    def _load_array_isstrarray(self, a) -> bool: ...
    def _load_line_multiline_str(self, p) -> Tuple[int, int]: ...
    def bounded_string(self, s) -> bool: ...
    def embed_comments(self, idx, currentlevel) -> None: ...
    def get_empty_inline_table(self) -> Any: ...
    def get_empty_table(self) -> Any: ...
    def load_array(self, a) -> list: ...
    def load_inline_object(self, line, currentlevel, multikey = ..., multibackslash = ...) -> None: ...
    def load_line(self, line, currentlevel, multikey, multibackslash: _T3) -> Optional[Tuple[Any, Any, Union[bool, _T3]]]: ...
    def load_value(self, v, strictly_valid = ...) -> Tuple[Any, str]: ...
    def preserve_comment(self, line_no, key, comment, beginline) -> None: ...

class TomlPreserveCommentDecoder(TomlDecoder):
    _dict: Any
    saved_comments: Dict[Any, Tuple[Any, Any, Any]]
    def __init__(self, _dict = ...) -> None: ...
    def embed_comments(self, idx, currentlevel) -> None: ...
    def preserve_comment(self, line_no, key, comment, beginline) -> None: ...

def _detect_pathlib_path(p) -> bool: ...
def _getpath(p) -> Any: ...
def _ispath(p) -> Any: ...
def _load_date(val) -> Optional[datetime.date]: ...
def _load_unicode_escapes(v, hexbytes, prefix) -> Any: ...
def _strictly_valid_num(n) -> bool: ...
def _unescape(v: _T0) -> _T0: ...
def load(f, _dict = ..., decoder = ...) -> Any: ...
def loads(s, _dict = ..., decoder = ...) -> Any: ...
def unichr(i: int) -> str: ...
