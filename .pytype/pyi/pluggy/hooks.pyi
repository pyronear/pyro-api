# (generated with --quick)

from typing import Any, Callable, List, Optional

_PYPY3: bool
inspect: module
sys: module
warnings: module

class HookImpl:
    argnames: Any
    function: Any
    kwargnames: Any
    opts: Any
    plugin: Any
    plugin_name: Any
    def __init__(self, plugin, plugin_name, function, hook_impl_opts) -> None: ...
    def __repr__(self) -> str: ...

class HookSpec:
    argnames: list
    function: Any
    kwargnames: Any
    name: Any
    namespace: Any
    opts: Any
    warn_on_impl: Any
    def __init__(self, namespace, name, opts) -> None: ...

class HookimplMarker:
    __doc__: str
    project_name: Any
    def __call__(self, function = ..., hookwrapper = ..., optionalhook = ..., tryfirst = ..., trylast = ...) -> Any: ...
    def __init__(self, project_name) -> None: ...

class HookspecMarker:
    __doc__: str
    project_name: Any
    def __call__(self, function = ..., firstresult = ..., historic = ..., warn_on_impl = ...) -> Any: ...
    def __init__(self, project_name) -> None: ...

class _HookCaller:
    _call_history: List[nothing]
    _nonwrappers: list
    _wrappers: list
    argnames: None
    kwargnames: None
    multicall: Callable
    name: Any
    spec: Optional[HookSpec]
    def __call__(self, *args, **kwargs) -> Any: ...
    def __init__(self, name, hook_execute, specmodule_or_class = ..., spec_opts = ...) -> None: ...
    def __repr__(self) -> str: ...
    def _add_hookimpl(self, hookimpl) -> None: ...
    def _hookexec(self, _1: _HookCaller, _2, _3) -> Any: ...
    def _maybe_apply_history(self, method) -> None: ...
    def _remove_plugin(self, plugin) -> None: ...
    def call_extra(self, methods, kwargs) -> Any: ...
    def call_historic(self, result_callback = ..., kwargs = ..., proc = ...) -> None: ...
    def get_hookimpls(self) -> list: ...
    def has_spec(self) -> bool: ...
    def is_historic(self) -> bool: ...
    def set_specification(self, specmodule_or_class, spec_opts) -> None: ...

class _HookRelay:
    __doc__: str

def _getargspec(func) -> inspect.FullArgSpec: ...
def _legacymulticall(hook_impls, caller_kwargs, firstresult = ...) -> Any: ...
def _multicall(hook_impls, caller_kwargs, firstresult = ...) -> Any: ...
def normalize_hookimpl_opts(opts) -> None: ...
def varnames(func) -> Any: ...
