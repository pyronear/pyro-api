# (generated with --quick)

import pluggy._tracing
import pluggy.callers
import pluggy.hooks
from typing import Any, Callable, Dict, List, Set, Tuple, Type

HookImpl: Type[pluggy.hooks.HookImpl]
_HookCaller: Type[pluggy.hooks._HookCaller]
_HookRelay: Type[pluggy.hooks._HookRelay]
_Result: Type[pluggy.callers._Result]
_tracing: module
importlib_metadata: Any
inspect: module
sys: module
warnings: module

class DistFacade:
    __doc__: str
    _dist: Any
    project_name: Any
    def __dir__(self) -> List[str]: ...
    def __getattr__(self, attr, default = ...) -> Any: ...
    def __init__(self, dist) -> None: ...

class PluginManager:
    __doc__: str
    _implprefix: Any
    _inner_hookexec: Callable[[Any, Any, Any], Any]
    _name2plugin: dict
    _plugin2hookcallers: Dict[Any, list]
    _plugin_distinfo: List[Tuple[Any, DistFacade]]
    hook: pluggy.hooks._HookRelay
    project_name: Any
    trace: pluggy._tracing.TagTracerSub
    def __init__(self, project_name, implprefix = ...) -> None: ...
    def _hookexec(self, hook, methods, kwargs) -> Any: ...
    def _verify_hook(self, hook, hookimpl) -> None: ...
    def add_hookcall_monitoring(self, before, after) -> Callable[[], Any]: ...
    def add_hookspecs(self, module_or_class) -> None: ...
    def check_pending(self) -> None: ...
    def enable_tracing(self) -> Any: ...
    def get_canonical_name(self, plugin) -> Any: ...
    def get_hookcallers(self, plugin) -> None: ...
    def get_name(self, plugin) -> None: ...
    def get_plugin(self, name) -> None: ...
    def get_plugins(self) -> Set[nothing]: ...
    def has_plugin(self, name) -> bool: ...
    def is_blocked(self, name) -> bool: ...
    def is_registered(self, plugin) -> bool: ...
    def list_name_plugin(self) -> List[Tuple[Any, Any]]: ...
    def list_plugin_distinfo(self) -> List[nothing]: ...
    def load_setuptools_entrypoints(self, group, name = ...) -> int: ...
    def parse_hookimpl_opts(self, plugin, name) -> Any: ...
    def parse_hookspec_opts(self, module_or_class, name) -> Any: ...
    def register(self, plugin, name = ...) -> Any: ...
    def set_blocked(self, name) -> None: ...
    def subset_hook_caller(self, name, remove_plugins) -> Any: ...
    def unregister(self, plugin = ..., name = ...) -> Any: ...

class PluginValidationError(Exception):
    __doc__: str
    plugin: Any
    def __init__(self, plugin, message) -> None: ...

def _formatdef(func) -> str: ...
def _warn_for_function(warning, function) -> None: ...
def normalize_hookimpl_opts(opts) -> None: ...
