# (generated with --quick)

import __future__
from typing import Any

DSAPublicKeyWithSerialization = DSAPublicKey

abc: module
absolute_import: __future__._Feature
division: __future__._Feature
print_function: __future__._Feature
six: module
utils: module

class DSAParameterNumbers:
    _g: Any
    _p: Any
    _q: Any
    g: Any
    p: Any
    q: Any
    def __eq__(self, other) -> Any: ...
    def __init__(self, p, q, g) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> Any: ...
    def parameters(self, backend = ...) -> Any: ...

class DSAParameters(metaclass=abc.ABCMeta):
    @abstractmethod
    def generate_private_key(self) -> Any: ...

class DSAParametersWithNumbers(DSAParameters):
    @abstractmethod
    def parameter_numbers(self) -> Any: ...

class DSAPrivateKey(metaclass=abc.ABCMeta):
    key_size: Any
    @abstractmethod
    def parameters(self) -> Any: ...
    @abstractmethod
    def public_key(self) -> Any: ...
    @abstractmethod
    def sign(self, data, algorithm) -> Any: ...
    @abstractmethod
    def signer(self, signature_algorithm) -> Any: ...

class DSAPrivateKeyWithSerialization(DSAPrivateKey):
    @abstractmethod
    def private_bytes(self, encoding, format, encryption_algorithm) -> Any: ...
    @abstractmethod
    def private_numbers(self) -> Any: ...

class DSAPrivateNumbers:
    _public_numbers: Any
    _x: Any
    public_numbers: Any
    x: Any
    def __eq__(self, other) -> Any: ...
    def __init__(self, x, public_numbers) -> None: ...
    def __ne__(self, other) -> bool: ...
    def private_key(self, backend = ...) -> Any: ...

class DSAPublicKey(metaclass=abc.ABCMeta):
    key_size: Any
    @abstractmethod
    def parameters(self) -> Any: ...
    @abstractmethod
    def public_bytes(self, encoding, format) -> Any: ...
    @abstractmethod
    def public_numbers(self) -> Any: ...
    @abstractmethod
    def verifier(self, signature, signature_algorithm) -> Any: ...
    @abstractmethod
    def verify(self, signature, data, algorithm) -> Any: ...

class DSAPublicNumbers:
    _parameter_numbers: Any
    _y: Any
    parameter_numbers: Any
    y: Any
    def __eq__(self, other) -> Any: ...
    def __init__(self, y, parameter_numbers) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> Any: ...
    def public_key(self, backend = ...) -> Any: ...

def _check_dsa_parameters(parameters) -> None: ...
def _check_dsa_private_numbers(numbers) -> None: ...
def _get_backend(backend) -> Any: ...
def generate_parameters(key_size, backend = ...) -> Any: ...
def generate_private_key(key_size, backend = ...) -> Any: ...
