# (generated with --quick)

import __future__
import cryptography.hazmat._der
import cryptography.x509.extensions
import cryptography.x509.name
import cryptography.x509.oid
from typing import Any, Callable, Dict, Optional, Tuple, Type

CRLEntryExtensionOID: Type[cryptography.x509.oid.CRLEntryExtensionOID]
CertificatePoliciesOID: Type[cryptography.x509.oid.CertificatePoliciesOID]
DERReader: Type[cryptography.hazmat._der.DERReader]
ExtensionOID: Type[cryptography.x509.oid.ExtensionOID]
INTEGER: int
NULL: int
OCSPExtensionOID: Type[cryptography.x509.oid.OCSPExtensionOID]
SEQUENCE: int
_ASN1_TYPE_TO_ENUM: Dict[Any, cryptography.x509.name._ASN1Type]
_CRL_ENTRY_REASON_CODE_TO_ENUM: Dict[int, Any]
_CRL_ENTRY_REASON_ENUM_TO_CODE: Dict[Any, int]
_CRL_EXTENSION_HANDLERS: Dict[Any, Callable[[Any, Any], Any]]
_DISTPOINT_TYPE_FULLNAME: int
_DISTPOINT_TYPE_RELATIVENAME: int
_EXTENSION_HANDLERS_BASE: Dict[Any, Callable[[Any, Any], Any]]
_EXTENSION_HANDLERS_SCT: Dict[Any, Callable[[Any, Any], Any]]
_OCSP_BASICRESP_EXTENSION_HANDLERS: Dict[Any, Callable[[Any, Any], Any]]
_OCSP_REQ_EXTENSION_HANDLERS: Dict[Any, Callable[[Any, Any], Any]]
_OCSP_SINGLERESP_EXTENSION_HANDLERS_SCT: Dict[Any, Callable[[Any, Any], Any]]
_REASON_BIT_MAPPING: Dict[int, Any]
_REVOKED_EXTENSION_HANDLERS: Dict[Any, Callable[[Any, Any], Any]]
_TLS_FEATURE_TYPE_TO_ENUM: Dict[Any, cryptography.x509.extensions.TLSFeatureType]
absolute_import: __future__._Feature
datetime: module
division: __future__._Feature
ipaddress: module
print_function: __future__._Feature
six: module
x509: module

class _X509ExtensionParser:
    _backend: Any
    handlers: Any
    def __init__(self, backend, ext_count, get_ext, handlers) -> None: ...
    def ext_count(self, _1) -> Any: ...
    def get_ext(self, _1, _2: int) -> Any: ...
    def parse(self, x509_obj) -> Any: ...

def _asn1_integer_to_int(backend, asn1_int) -> Any: ...
def _asn1_integer_to_int_or_none(backend, asn1_int) -> Any: ...
def _asn1_string_to_ascii(backend, asn1_string) -> Any: ...
def _asn1_string_to_bytes(backend, asn1_string) -> Any: ...
def _asn1_string_to_utf8(backend, asn1_string) -> Any: ...
def _asn1_to_der(backend, asn1_type) -> Any: ...
def _decode_authority_information_access(backend, aia) -> Any: ...
def _decode_authority_key_identifier(backend, akid) -> Any: ...
def _decode_basic_constraints(backend, bc_st) -> Any: ...
def _decode_cert_issuer(backend, gns) -> Any: ...
def _decode_certificate_policies(backend, cp) -> Any: ...
def _decode_crl_distribution_points(backend, cdps) -> Any: ...
def _decode_crl_number(backend, ext) -> Any: ...
def _decode_crl_reason(backend, enum) -> Any: ...
def _decode_delta_crl_indicator(backend, ext) -> Any: ...
def _decode_dist_points(backend, cdps) -> list: ...
def _decode_distpoint(backend, distpoint) -> Tuple[Any, Any]: ...
def _decode_extended_key_usage(backend, sk) -> Any: ...
def _decode_freshest_crl(backend, cdps) -> Any: ...
def _decode_general_name(backend, gn) -> Any: ...
def _decode_general_names(backend, gns) -> list: ...
def _decode_general_names_extension(backend, gns) -> Any: ...
def _decode_general_subtrees(backend, stack_subtrees) -> Optional[list]: ...
def _decode_information_access(backend, ia) -> list: ...
def _decode_inhibit_any_policy(backend, asn1_int) -> Any: ...
def _decode_invalidity_date(backend, inv_date) -> Any: ...
def _decode_issuer_alt_name(backend, ext) -> Any: ...
def _decode_issuing_dist_point(backend, idp) -> Any: ...
def _decode_key_usage(backend, bit_string) -> Any: ...
def _decode_name_constraints(backend, nc) -> Any: ...
def _decode_nonce(backend, nonce) -> Any: ...
def _decode_ocsp_no_check(backend, ext) -> Any: ...
def _decode_policy_constraints(backend, pc) -> Any: ...
def _decode_precert_signed_certificate_timestamps(backend, asn1_scts) -> Any: ...
def _decode_reasons(backend, reasons) -> frozenset: ...
def _decode_scts(backend, asn1_scts) -> list: ...
def _decode_signed_certificate_timestamps(backend, asn1_scts) -> Any: ...
def _decode_subject_alt_name(backend, ext) -> Any: ...
def _decode_subject_information_access(backend, aia) -> Any: ...
def _decode_subject_key_identifier(backend, asn1_string) -> Any: ...
def _decode_user_notice(backend, un) -> Any: ...
def _decode_x509_name(backend, x509_name) -> Any: ...
def _decode_x509_name_entry(backend, x509_name_entry) -> Any: ...
def _obj2txt(backend, obj) -> Any: ...
def _parse_asn1_generalized_time(backend, generalized_time) -> datetime.datetime: ...
def _parse_asn1_time(backend, asn1_time) -> Any: ...
