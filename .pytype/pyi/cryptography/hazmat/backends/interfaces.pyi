# (generated with --quick)

import __future__
from typing import Any

abc: module
absolute_import: __future__._Feature
division: __future__._Feature
print_function: __future__._Feature
six: module

class CMACBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def cmac_algorithm_supported(self, algorithm) -> Any: ...
    @abstractmethod
    def create_cmac_ctx(self, algorithm) -> Any: ...

class CipherBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def cipher_supported(self, cipher, mode) -> Any: ...
    @abstractmethod
    def create_symmetric_decryption_ctx(self, cipher, mode) -> Any: ...
    @abstractmethod
    def create_symmetric_encryption_ctx(self, cipher, mode) -> Any: ...

class DERSerializationBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def load_der_parameters(self, data) -> Any: ...
    @abstractmethod
    def load_der_private_key(self, data, password) -> Any: ...
    @abstractmethod
    def load_der_public_key(self, data) -> Any: ...

class DHBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def dh_parameters_supported(self, p, g, q = ...) -> Any: ...
    @abstractmethod
    def dh_x942_serialization_supported(self) -> Any: ...
    @abstractmethod
    def generate_dh_parameters(self, generator, key_size) -> Any: ...
    @abstractmethod
    def generate_dh_private_key(self, parameters) -> Any: ...
    @abstractmethod
    def generate_dh_private_key_and_parameters(self, generator, key_size) -> Any: ...
    @abstractmethod
    def load_dh_parameter_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def load_dh_private_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def load_dh_public_numbers(self, numbers) -> Any: ...

class DSABackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def dsa_hash_supported(self, algorithm) -> Any: ...
    @abstractmethod
    def dsa_parameters_supported(self, p, q, g) -> Any: ...
    @abstractmethod
    def generate_dsa_parameters(self, key_size) -> Any: ...
    @abstractmethod
    def generate_dsa_private_key(self, parameters) -> Any: ...
    @abstractmethod
    def generate_dsa_private_key_and_parameters(self, key_size) -> Any: ...
    @abstractmethod
    def load_dsa_parameter_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def load_dsa_private_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def load_dsa_public_numbers(self, numbers) -> Any: ...

class EllipticCurveBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def derive_elliptic_curve_private_key(self, private_value, curve) -> Any: ...
    @abstractmethod
    def elliptic_curve_exchange_algorithm_supported(self, algorithm, curve) -> Any: ...
    @abstractmethod
    def elliptic_curve_signature_algorithm_supported(self, signature_algorithm, curve) -> Any: ...
    @abstractmethod
    def elliptic_curve_supported(self, curve) -> Any: ...
    @abstractmethod
    def generate_elliptic_curve_private_key(self, curve) -> Any: ...
    @abstractmethod
    def load_elliptic_curve_private_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def load_elliptic_curve_public_numbers(self, numbers) -> Any: ...

class HMACBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def create_hmac_ctx(self, key, algorithm) -> Any: ...
    @abstractmethod
    def hmac_supported(self, algorithm) -> Any: ...

class HashBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def create_hash_ctx(self, algorithm) -> Any: ...
    @abstractmethod
    def hash_supported(self, algorithm) -> Any: ...

class PBKDF2HMACBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def derive_pbkdf2_hmac(self, algorithm, length, salt, iterations, key_material) -> Any: ...
    @abstractmethod
    def pbkdf2_hmac_supported(self, algorithm) -> Any: ...

class PEMSerializationBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def load_pem_parameters(self, data) -> Any: ...
    @abstractmethod
    def load_pem_private_key(self, data, password) -> Any: ...
    @abstractmethod
    def load_pem_public_key(self, data) -> Any: ...

class RSABackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def generate_rsa_parameters_supported(self, public_exponent, key_size) -> Any: ...
    @abstractmethod
    def generate_rsa_private_key(self, public_exponent, key_size) -> Any: ...
    @abstractmethod
    def load_rsa_private_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def load_rsa_public_numbers(self, numbers) -> Any: ...
    @abstractmethod
    def rsa_padding_supported(self, padding) -> Any: ...

class ScryptBackend(metaclass=abc.ABCMeta):
    @abstractmethod
    def derive_scrypt(self, key_material, salt, length, n, r, p) -> Any: ...

class X509Backend(metaclass=abc.ABCMeta):
    @abstractmethod
    def create_x509_certificate(self, builder, private_key, algorithm) -> Any: ...
    @abstractmethod
    def create_x509_crl(self, builder, private_key, algorithm) -> Any: ...
    @abstractmethod
    def create_x509_csr(self, builder, private_key, algorithm) -> Any: ...
    @abstractmethod
    def create_x509_revoked_certificate(self, builder) -> Any: ...
    @abstractmethod
    def load_der_x509_certificate(self, data) -> Any: ...
    @abstractmethod
    def load_der_x509_csr(self, data) -> Any: ...
    @abstractmethod
    def load_pem_x509_certificate(self, data) -> Any: ...
    @abstractmethod
    def load_pem_x509_csr(self, data) -> Any: ...
    @abstractmethod
    def x509_name_bytes(self, name) -> Any: ...
