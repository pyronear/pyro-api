# (generated with --quick)

import __future__
import cryptography.x509.base
import cryptography.x509.extensions
import cryptography.x509.general_name
import cryptography.x509.name
import cryptography.x509.oid
from typing import Any, Dict, Type

AccessDescription: Type[cryptography.x509.extensions.AccessDescription]
AttributeNotFound: Type[cryptography.x509.base.AttributeNotFound]
AuthorityInformationAccess: Any
AuthorityInformationAccessOID: Type[cryptography.x509.oid.AuthorityInformationAccessOID]
AuthorityKeyIdentifier: Any
BasicConstraints: Any
CRLDistributionPoints: Any
CRLEntryExtensionOID: Type[cryptography.x509.oid.CRLEntryExtensionOID]
CRLNumber: Any
CRLReason: Any
Certificate: Type[cryptography.x509.base.Certificate]
CertificateBuilder: Type[cryptography.x509.base.CertificateBuilder]
CertificateIssuer: Any
CertificatePolicies: Any
CertificatePoliciesOID: Type[cryptography.x509.oid.CertificatePoliciesOID]
CertificateRevocationList: Type[cryptography.x509.base.CertificateRevocationList]
CertificateRevocationListBuilder: Type[cryptography.x509.base.CertificateRevocationListBuilder]
CertificateSigningRequest: Type[cryptography.x509.base.CertificateSigningRequest]
CertificateSigningRequestBuilder: Type[cryptography.x509.base.CertificateSigningRequestBuilder]
DNSName: Any
DeltaCRLIndicator: Any
DirectoryName: Any
DistributionPoint: Type[cryptography.x509.extensions.DistributionPoint]
DuplicateExtension: Type[cryptography.x509.extensions.DuplicateExtension]
ExtendedKeyUsage: Any
ExtendedKeyUsageOID: Type[cryptography.x509.oid.ExtendedKeyUsageOID]
Extension: Type[cryptography.x509.extensions.Extension]
ExtensionNotFound: Type[cryptography.x509.extensions.ExtensionNotFound]
ExtensionOID: Type[cryptography.x509.oid.ExtensionOID]
ExtensionType: Type[cryptography.x509.extensions.ExtensionType]
Extensions: Type[cryptography.x509.extensions.Extensions]
FreshestCRL: Any
GeneralName: Type[cryptography.x509.general_name.GeneralName]
GeneralNames: Type[cryptography.x509.extensions.GeneralNames]
IPAddress: Any
InhibitAnyPolicy: Any
InvalidVersion: Type[cryptography.x509.base.InvalidVersion]
InvalidityDate: Any
IssuerAlternativeName: Any
IssuingDistributionPoint: Any
KeyUsage: Any
Name: Type[cryptography.x509.name.Name]
NameAttribute: Type[cryptography.x509.name.NameAttribute]
NameConstraints: Any
NameOID: Type[cryptography.x509.oid.NameOID]
NoticeReference: Type[cryptography.x509.extensions.NoticeReference]
OCSPNoCheck: Any
OCSPNonce: Any
OID_ANY_POLICY: Any
OID_AUTHORITY_INFORMATION_ACCESS: Any
OID_AUTHORITY_KEY_IDENTIFIER: Any
OID_BASIC_CONSTRAINTS: Any
OID_CA_ISSUERS: Any
OID_CERTIFICATE_ISSUER: Any
OID_CERTIFICATE_POLICIES: Any
OID_CLIENT_AUTH: Any
OID_CODE_SIGNING: Any
OID_COMMON_NAME: Any
OID_COUNTRY_NAME: Any
OID_CPS_QUALIFIER: Any
OID_CPS_USER_NOTICE: Any
OID_CRL_DISTRIBUTION_POINTS: Any
OID_CRL_REASON: Any
OID_DN_QUALIFIER: Any
OID_DOMAIN_COMPONENT: Any
OID_DSA_WITH_SHA1: Any
OID_DSA_WITH_SHA224: Any
OID_DSA_WITH_SHA256: Any
OID_ECDSA_WITH_SHA1: Any
OID_ECDSA_WITH_SHA224: Any
OID_ECDSA_WITH_SHA256: Any
OID_ECDSA_WITH_SHA384: Any
OID_ECDSA_WITH_SHA512: Any
OID_EMAIL_ADDRESS: Any
OID_EMAIL_PROTECTION: Any
OID_EXTENDED_KEY_USAGE: Any
OID_FRESHEST_CRL: Any
OID_GENERATION_QUALIFIER: Any
OID_GIVEN_NAME: Any
OID_INHIBIT_ANY_POLICY: Any
OID_INVALIDITY_DATE: Any
OID_ISSUER_ALTERNATIVE_NAME: Any
OID_KEY_USAGE: Any
OID_LOCALITY_NAME: Any
OID_NAME_CONSTRAINTS: Any
OID_OCSP: Any
OID_OCSP_NO_CHECK: Any
OID_OCSP_SIGNING: Any
OID_ORGANIZATIONAL_UNIT_NAME: Any
OID_ORGANIZATION_NAME: Any
OID_POLICY_CONSTRAINTS: Any
OID_POLICY_MAPPINGS: Any
OID_PSEUDONYM: Any
OID_RSASSA_PSS: Any
OID_RSA_WITH_MD5: Any
OID_RSA_WITH_SHA1: Any
OID_RSA_WITH_SHA224: Any
OID_RSA_WITH_SHA256: Any
OID_RSA_WITH_SHA384: Any
OID_RSA_WITH_SHA512: Any
OID_SERIAL_NUMBER: Any
OID_SERVER_AUTH: Any
OID_STATE_OR_PROVINCE_NAME: Any
OID_SUBJECT_ALTERNATIVE_NAME: Any
OID_SUBJECT_DIRECTORY_ATTRIBUTES: Any
OID_SUBJECT_INFORMATION_ACCESS: Any
OID_SUBJECT_KEY_IDENTIFIER: Any
OID_SURNAME: Any
OID_TIME_STAMPING: Any
OID_TITLE: Any
ObjectIdentifier: Any
OtherName: Any
PolicyConstraints: Any
PolicyInformation: Type[cryptography.x509.extensions.PolicyInformation]
PrecertPoison: Any
PrecertificateSignedCertificateTimestamps: Any
RFC822Name: Any
ReasonFlags: Type[cryptography.x509.extensions.ReasonFlags]
RegisteredID: Any
RelativeDistinguishedName: Type[cryptography.x509.name.RelativeDistinguishedName]
RevokedCertificate: Type[cryptography.x509.base.RevokedCertificate]
RevokedCertificateBuilder: Type[cryptography.x509.base.RevokedCertificateBuilder]
SignatureAlgorithmOID: Type[cryptography.x509.oid.SignatureAlgorithmOID]
SignedCertificateTimestamps: Any
SubjectAlternativeName: Any
SubjectInformationAccess: Any
SubjectKeyIdentifier: Any
TLSFeature: Any
TLSFeatureType: Type[cryptography.x509.extensions.TLSFeatureType]
UniformResourceIdentifier: Any
UnrecognizedExtension: Any
UnsupportedGeneralNameType: Type[cryptography.x509.general_name.UnsupportedGeneralNameType]
UserNotice: Type[cryptography.x509.extensions.UserNotice]
Version: Type[cryptography.x509.base.Version]
_GENERAL_NAMES: Dict[int, str]
_SIG_OIDS_TO_HASH: dict
__all__: list
absolute_import: __future__._Feature
certificate_transparency: module
division: __future__._Feature
print_function: __future__._Feature

def load_der_x509_certificate(data, backend = ...) -> Any: ...
def load_der_x509_crl(data, backend = ...) -> Any: ...
def load_der_x509_csr(data, backend = ...) -> Any: ...
def load_pem_x509_certificate(data, backend = ...) -> Any: ...
def load_pem_x509_crl(data, backend = ...) -> Any: ...
def load_pem_x509_csr(data, backend = ...) -> Any: ...
def random_serial_number() -> int: ...
