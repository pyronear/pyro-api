# (generated with --quick)

import __future__
import enum
from typing import Any, Type, TypeVar

Enum: Type[enum.Enum]
Extension: Any
ExtensionType: Any
Name: Any
ObjectIdentifier: Any
_EARLIEST_UTC_TIME: datetime.datetime
_get_backend: Any
abc: module
absolute_import: __future__._Feature
datetime: module
division: __future__._Feature
dsa: module
ec: Any
ed25519: module
ed448: module
os: module
print_function: __future__._Feature
rsa: module
six: module
utils: module

_TCertificateBuilder = TypeVar('_TCertificateBuilder', bound=CertificateBuilder)
_TCertificateRevocationListBuilder = TypeVar('_TCertificateRevocationListBuilder', bound=CertificateRevocationListBuilder)
_TCertificateSigningRequestBuilder = TypeVar('_TCertificateSigningRequestBuilder', bound=CertificateSigningRequestBuilder)
_TRevokedCertificateBuilder = TypeVar('_TRevokedCertificateBuilder', bound=RevokedCertificateBuilder)

class AttributeNotFound(Exception):
    oid: Any
    def __init__(self, msg, oid) -> None: ...

class Certificate(metaclass=abc.ABCMeta):
    extensions: Any
    issuer: Any
    not_valid_after: Any
    not_valid_before: Any
    serial_number: Any
    signature: Any
    signature_algorithm_oid: Any
    signature_hash_algorithm: Any
    subject: Any
    tbs_certificate_bytes: Any
    version: Any
    @abstractmethod
    def __eq__(self, other) -> Any: ...
    @abstractmethod
    def __hash__(self) -> Any: ...
    @abstractmethod
    def __ne__(self, other) -> Any: ...
    @abstractmethod
    def fingerprint(self, algorithm) -> Any: ...
    @abstractmethod
    def public_bytes(self, encoding) -> Any: ...
    @abstractmethod
    def public_key(self) -> Any: ...

class CertificateBuilder:
    _extensions: Any
    _issuer_name: Any
    _not_valid_after: Any
    _not_valid_before: Any
    _public_key: Any
    _serial_number: Any
    _subject_name: Any
    _version: Any
    def __init__(self, issuer_name = ..., subject_name = ..., public_key = ..., serial_number = ..., not_valid_before = ..., not_valid_after = ..., extensions = ...) -> None: ...
    def add_extension(self: _TCertificateBuilder, extension, critical) -> _TCertificateBuilder: ...
    def issuer_name(self: _TCertificateBuilder, name) -> _TCertificateBuilder: ...
    def not_valid_after(self: _TCertificateBuilder, time) -> _TCertificateBuilder: ...
    def not_valid_before(self: _TCertificateBuilder, time) -> _TCertificateBuilder: ...
    def public_key(self: _TCertificateBuilder, key) -> _TCertificateBuilder: ...
    def serial_number(self: _TCertificateBuilder, number) -> _TCertificateBuilder: ...
    def sign(self, private_key, algorithm, backend = ...) -> Any: ...
    def subject_name(self: _TCertificateBuilder, name) -> _TCertificateBuilder: ...

class CertificateRevocationList(metaclass=abc.ABCMeta):
    extensions: Any
    issuer: Any
    last_update: Any
    next_update: Any
    signature: Any
    signature_algorithm_oid: Any
    signature_hash_algorithm: Any
    tbs_certlist_bytes: Any
    @abstractmethod
    def __eq__(self, other) -> Any: ...
    @abstractmethod
    def __getitem__(self, idx) -> Any: ...
    @abstractmethod
    def __iter__(self) -> Any: ...
    @abstractmethod
    def __len__(self) -> Any: ...
    @abstractmethod
    def __ne__(self, other) -> Any: ...
    @abstractmethod
    def fingerprint(self, algorithm) -> Any: ...
    @abstractmethod
    def get_revoked_certificate_by_serial_number(self, serial_number) -> Any: ...
    @abstractmethod
    def is_signature_valid(self, public_key) -> Any: ...
    @abstractmethod
    def public_bytes(self, encoding) -> Any: ...

class CertificateRevocationListBuilder:
    _extensions: Any
    _issuer_name: Any
    _last_update: Any
    _next_update: Any
    _revoked_certificates: Any
    def __init__(self, issuer_name = ..., last_update = ..., next_update = ..., extensions = ..., revoked_certificates = ...) -> None: ...
    def add_extension(self: _TCertificateRevocationListBuilder, extension, critical) -> _TCertificateRevocationListBuilder: ...
    def add_revoked_certificate(self: _TCertificateRevocationListBuilder, revoked_certificate) -> _TCertificateRevocationListBuilder: ...
    def issuer_name(self: _TCertificateRevocationListBuilder, issuer_name) -> _TCertificateRevocationListBuilder: ...
    def last_update(self: _TCertificateRevocationListBuilder, last_update) -> _TCertificateRevocationListBuilder: ...
    def next_update(self: _TCertificateRevocationListBuilder, next_update) -> _TCertificateRevocationListBuilder: ...
    def sign(self, private_key, algorithm, backend = ...) -> Any: ...

class CertificateSigningRequest(metaclass=abc.ABCMeta):
    extensions: Any
    get_attribute_for_oid: Any
    is_signature_valid: Any
    signature: Any
    signature_algorithm_oid: Any
    signature_hash_algorithm: Any
    subject: Any
    tbs_certrequest_bytes: Any
    @abstractmethod
    def __eq__(self, other) -> Any: ...
    @abstractmethod
    def __hash__(self) -> Any: ...
    @abstractmethod
    def __ne__(self, other) -> Any: ...
    @abstractmethod
    def public_bytes(self, encoding) -> Any: ...
    @abstractmethod
    def public_key(self) -> Any: ...

class CertificateSigningRequestBuilder:
    _attributes: Any
    _extensions: Any
    _subject_name: Any
    def __init__(self, subject_name = ..., extensions = ..., attributes = ...) -> None: ...
    def add_attribute(self: _TCertificateSigningRequestBuilder, oid, value) -> _TCertificateSigningRequestBuilder: ...
    def add_extension(self: _TCertificateSigningRequestBuilder, extension, critical) -> _TCertificateSigningRequestBuilder: ...
    def sign(self, private_key, algorithm, backend = ...) -> Any: ...
    def subject_name(self: _TCertificateSigningRequestBuilder, name) -> _TCertificateSigningRequestBuilder: ...

class InvalidVersion(Exception):
    parsed_version: Any
    def __init__(self, msg, parsed_version) -> None: ...

class RevokedCertificate(metaclass=abc.ABCMeta):
    extensions: Any
    revocation_date: Any
    serial_number: Any

class RevokedCertificateBuilder:
    _extensions: Any
    _revocation_date: Any
    _serial_number: Any
    def __init__(self, serial_number = ..., revocation_date = ..., extensions = ...) -> None: ...
    def add_extension(self: _TRevokedCertificateBuilder, extension, critical) -> _TRevokedCertificateBuilder: ...
    def build(self, backend = ...) -> Any: ...
    def revocation_date(self: _TRevokedCertificateBuilder, time) -> _TRevokedCertificateBuilder: ...
    def serial_number(self: _TRevokedCertificateBuilder, number) -> _TRevokedCertificateBuilder: ...

class Version(enum.Enum):
    v1: int
    v3: int

def _convert_to_naive_utc_time(time) -> Any: ...
def _reject_duplicate_attribute(oid, attributes) -> None: ...
def _reject_duplicate_extension(extension, extensions) -> None: ...
def load_der_x509_certificate(data, backend = ...) -> Any: ...
def load_der_x509_crl(data, backend = ...) -> Any: ...
def load_der_x509_csr(data, backend = ...) -> Any: ...
def load_pem_x509_certificate(data, backend = ...) -> Any: ...
def load_pem_x509_crl(data, backend = ...) -> Any: ...
def load_pem_x509_csr(data, backend = ...) -> Any: ...
def random_serial_number() -> int: ...
