# (generated with --quick)

import __future__
import enum
from typing import Any, Dict, Generator, Type, Union

Enum: Type[enum.Enum]
NameOID: Any
ObjectIdentifier: Any
_ASN1_TYPE_TO_ENUM: Dict[Any, _ASN1Type]
_NAMEOID_DEFAULT_TYPE: dict
_NAMEOID_TO_NAME: Dict[Any, str]
_SENTINEL: Any
_get_backend: Any
absolute_import: __future__._Feature
division: __future__._Feature
print_function: __future__._Feature
six: module
utils: module

class Name:
    _attributes: Any
    rdns: Any
    def __eq__(self, other) -> Any: ...
    def __hash__(self) -> int: ...
    def __init__(self, attributes) -> None: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def __len__(self) -> Any: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def get_attributes_for_oid(self, oid) -> Any: ...
    def public_bytes(self, backend = ...) -> Any: ...
    def rfc4514_string(self) -> str: ...

class NameAttribute:
    _oid: Any
    _type: Any
    _value: Any
    oid: Any
    value: Any
    def __eq__(self, other) -> Any: ...
    def __hash__(self) -> int: ...
    def __init__(self, oid, value, _type = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def rfc4514_string(self) -> str: ...

class RelativeDistinguishedName:
    _attribute_set: frozenset
    _attributes: list
    def __eq__(self, other) -> Union[NotImplementedType, bool]: ...
    def __hash__(self) -> int: ...
    def __init__(self, attributes) -> None: ...
    def __iter__(self) -> listiterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def get_attributes_for_oid(self, oid) -> Any: ...
    def rfc4514_string(self) -> str: ...

class _ASN1Type(enum.Enum):
    BMPString: int
    GeneralizedTime: int
    IA5String: int
    NumericString: int
    PrintableString: int
    T61String: int
    UTCTime: int
    UTF8String: int
    UniversalString: int
    VisibleString: int

def _escape_dn_value(val) -> Any: ...
