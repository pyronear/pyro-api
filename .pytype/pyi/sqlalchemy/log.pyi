# (generated with --quick)

from typing import Any, Dict, Optional, TypeVar, Union

_logged_classes: set
logging: module
rootlogger: logging.Logger
sys: module

_T0 = TypeVar('_T0')

class Identified:
    logging_name: None
    def _should_log_debug(self) -> Any: ...
    def _should_log_info(self) -> Any: ...

class InstanceLogger:
    __doc__: str
    _echo_map: Dict[Optional[Union[bool, str]], int]
    echo: Any
    logger: logging.Logger
    def __init__(self, echo, name) -> None: ...
    def critical(self, msg, *args, **kwargs) -> None: ...
    def debug(self, msg, *args, **kwargs) -> None: ...
    def error(self, msg, *args, **kwargs) -> None: ...
    def exception(self, msg, *args, **kwargs) -> None: ...
    def getEffectiveLevel(self) -> int: ...
    def info(self, msg, *args, **kwargs) -> None: ...
    def isEnabledFor(self, level) -> Any: ...
    def log(self, level, msg, *args, **kwargs) -> None: ...
    def warn(self, msg, *args, **kwargs) -> None: ...
    def warning(self, msg, *args, **kwargs) -> None: ...

class echo_property:
    __doc__: str
    def __get__(self, instance, owner) -> Any: ...
    def __set__(self, instance, value) -> None: ...

def _add_default_handler(logger) -> None: ...
def class_logger(cls: _T0) -> _T0: ...
def instance_logger(instance, echoflag = ...) -> None: ...
