# (generated with --quick)

import sqlalchemy.util.queue
from typing import Any, List, Optional, TypeVar

Pool: Any
_ConnectionFairy: Any
_ConnectionRecord: Any
chop_traceback: Any
exc: module
sqla_queue: module
threading: module
traceback: module
util: module
weakref: module

_TAssertionPool = TypeVar('_TAssertionPool', bound=AssertionPool)
_TNullPool = TypeVar('_TNullPool', bound=NullPool)
_TQueuePool = TypeVar('_TQueuePool', bound=QueuePool)
_TSingletonThreadPool = TypeVar('_TSingletonThreadPool', bound=SingletonThreadPool)
_TStaticPool = TypeVar('_TStaticPool', bound=StaticPool)

class AssertionPool(Any):
    __doc__: str
    _checked_out: bool
    _checkout_traceback: Optional[List[str]]
    _conn: Any
    _store_traceback: Any
    def __init__(self, *args, **kw) -> None: ...
    def _do_get(self) -> Any: ...
    def _do_return_conn(self, conn) -> None: ...
    def dispose(self) -> None: ...
    def recreate(self: _TAssertionPool) -> _TAssertionPool: ...
    def status(self) -> str: ...

class NullPool(Any):
    __doc__: str
    def _do_get(self) -> Any: ...
    def _do_return_conn(self, conn) -> None: ...
    def dispose(self) -> None: ...
    def recreate(self: _TNullPool) -> _TNullPool: ...
    def status(self) -> str: ...

class QueuePool(Any):
    __doc__: str
    _max_overflow: Any
    _overflow: Any
    _overflow_lock: Any
    _pool: sqlalchemy.util.queue.Queue
    _timeout: Any
    def __init__(self, creator, pool_size = ..., max_overflow = ..., timeout = ..., use_lifo = ..., **kw) -> None: ...
    def _dec_overflow(self) -> bool: ...
    def _do_get(self) -> Any: ...
    def _do_return_conn(self, conn) -> None: ...
    def _inc_overflow(self) -> bool: ...
    def checkedin(self) -> Any: ...
    def checkedout(self) -> Any: ...
    def dispose(self) -> None: ...
    def overflow(self) -> Any: ...
    def recreate(self: _TQueuePool) -> _TQueuePool: ...
    def size(self) -> Any: ...
    def status(self) -> str: ...
    def timeout(self) -> Any: ...

class SingletonThreadPool(Any):
    __doc__: str
    _all_conns: set
    _conn: Any
    _fairy: Any
    size: Any
    def __init__(self, creator, pool_size = ..., **kw) -> None: ...
    def _cleanup(self) -> None: ...
    def _do_get(self) -> Any: ...
    def _do_return_conn(self, conn) -> None: ...
    def _return_conn(self, record) -> None: ...
    def connect(self) -> Any: ...
    def dispose(self) -> None: ...
    def recreate(self: _TSingletonThreadPool) -> _TSingletonThreadPool: ...
    def status(self) -> str: ...

class StaticPool(Any):
    __doc__: str
    _conn: Any
    connection: Any
    def _create_connection(self) -> Any: ...
    def _do_get(self) -> Any: ...
    def _do_return_conn(self, conn) -> None: ...
    def dispose(self) -> None: ...
    def recreate(self: _TStaticPool) -> _TStaticPool: ...
    def status(self) -> str: ...
