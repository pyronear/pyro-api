# (generated with --quick)

import sqlalchemy.sql.elements
from typing import Any, Callable, List, Tuple, TypeVar, Union

ISDELETE: Any
ISINSERT: Any
ISUPDATE: Any
REQUIRED: Any
dml: module
elements: module
exc: module
operator: module
util: module

_T2 = TypeVar('_T2')

class _multiparam_column(sqlalchemy.sql.elements.ColumnElement):
    _is_multiparam_column: bool
    default: Any
    index: Any
    key: str
    original: Any
    type: Any
    def __eq__(self, other) -> Any: ...
    def __init__(self, original, index) -> None: ...

def _append_param_insert_hasdefault(compiler, stmt, c, implicit_return_defaults, values, kw) -> None: ...
def _append_param_insert_pk(compiler, stmt, c, values, kw) -> None: ...
def _append_param_insert_pk_returning(compiler, stmt, c, values, kw) -> None: ...
def _append_param_insert_select_hasdefault(compiler, stmt, c, values, kw) -> None: ...
def _append_param_parameter(compiler, stmt, c, col_key, parameters, _col_bind_name, implicit_returning, implicit_return_defaults, values, kw) -> None: ...
def _append_param_update(compiler, stmt, c, implicit_return_defaults, values, kw) -> None: ...
def _create_bind_param(compiler, col, value, process = ..., required = ..., name = ..., **kw) -> Any: ...
def _create_insert_prefetch_bind_param(compiler, c, process = ..., name = ...) -> Any: ...
def _create_update_prefetch_bind_param(compiler, c, process = ..., name = ...) -> Any: ...
def _extend_values_for_multiparams(compiler, stmt, values: _T2, kw) -> List[Union[List[Tuple[Any, Any]], _T2]]: ...
def _get_crud_params(compiler, stmt, **kw) -> Any: ...
def _get_multitable_params(compiler, stmt, stmt_parameters, check_columns, _col_bind_name, _getattr_col_key, values, kw) -> None: ...
def _get_returning_modifiers(compiler, stmt) -> Tuple[Any, Any, Any, Any]: ...
def _get_stmt_parameters_params(compiler, parameters, stmt_parameters, _column_as_key, values, kw) -> None: ...
def _key_getters_for_crud_column(compiler, stmt) -> Tuple[Callable[[Any], Any], Callable[[Any], Any], Callable[[Any], Any]]: ...
def _process_multiparam_default_bind(compiler, stmt, c, index, kw) -> Any: ...
def _scan_cols(compiler, stmt, parameters, _getattr_col_key, _column_as_key, _col_bind_name, check_columns, values, kw) -> None: ...
def _scan_insert_from_select_cols(compiler, stmt, parameters, _getattr_col_key, _column_as_key, _col_bind_name, check_columns, values, kw) -> None: ...
def _setup_crud_params(compiler, stmt, local_stmt_type, **kw) -> Any: ...
def _warn_pk_with_no_anticipated_value(c) -> None: ...
