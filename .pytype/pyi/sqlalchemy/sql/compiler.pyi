# (generated with --quick)

import sqlalchemy.sql.visitors
import sqlalchemy.util._collections
from typing import Any, Callable, Dict, List, NoReturn, Optional, Pattern, Tuple, TypeVar

BIND_PARAMS: Pattern[str]
BIND_PARAMS_ESC: Pattern[str]
BIND_TEMPLATES: Dict[str, str]
COMPOUND_KEYWORDS: Dict[Any, str]
EXTRACT_MAP: Dict[str, str]
FK_INITIALLY: Pattern[str]
FK_ON_DELETE: Pattern[str]
FK_ON_UPDATE: Pattern[str]
FUNCTIONS: Dict[type, str]
ILLEGAL_INITIAL_CHARACTERS: set
LEGAL_CHARACTERS: Pattern[str]
LEGAL_CHARACTERS_PLUS_SPACE: Pattern[str]
OPERATORS: Dict[Any, str]
RESERVED_WORDS: set
contextlib: module
crud: module
elements: module
exc: module
functions: module
itertools: module
operators: module
re: module
schema: module
selectable: module
sqltypes: module
util: module
visitors: module

_T0 = TypeVar('_T0')
_TIdentifierPreparer = TypeVar('_TIdentifierPreparer', bound=IdentifierPreparer)
_T_CompileLabel = TypeVar('_T_CompileLabel', bound=_CompileLabel)

class Compiled:
    __doc__: str
    _cached_metadata: None
    bind: Any
    can_execute: Any
    compile: Any
    dialect: Any
    execution_options: Any
    params: Any
    preparer: Any
    schema_translate_map: Any
    statement: Any
    string: Any
    def __init__(self, dialect, statement, bind = ..., schema_translate_map = ..., compile_kwargs = ...) -> None: ...
    def __str__(self) -> Any: ...
    def _execute_on_connection(self, connection, multiparams, params) -> Any: ...
    def construct_params(self, params = ...) -> NoReturn: ...
    def execute(self, *multiparams, **params) -> Any: ...
    def process(self, obj, **kwargs) -> Any: ...
    def scalar(self, *multiparams, **params) -> Any: ...

class DDLCompiler(Compiled):
    bind: Any
    can_execute: Any
    dialect: Any
    execution_options: Any
    preparer: Any
    schema_translate_map: Any
    sql_compiler: Any
    statement: Any
    string: Any
    type_compiler: Any
    def _prepared_index_name(self, index, include_schema = ...) -> Any: ...
    def _verify_index_table(self, index) -> None: ...
    def construct_params(self, params = ...) -> None: ...
    def create_table_constraints(self, table, _include_foreign_key_constraints = ...) -> str: ...
    def create_table_suffix(self, table) -> str: ...
    def define_constraint_cascades(self, constraint) -> str: ...
    def define_constraint_deferrability(self, constraint) -> str: ...
    def define_constraint_match(self, constraint) -> str: ...
    def define_constraint_remote_table(self, constraint, table, preparer) -> Any: ...
    def get_column_default_string(self, column) -> Any: ...
    def get_column_specification(self, column, **kwargs) -> Any: ...
    def post_create_table(self, table) -> str: ...
    def visit_add_constraint(self, create) -> str: ...
    def visit_check_constraint(self, constraint) -> str: ...
    def visit_column_check_constraint(self, constraint) -> str: ...
    def visit_computed_column(self, generated) -> str: ...
    def visit_create_column(self, create, first_pk = ...) -> Any: ...
    def visit_create_index(self, create, include_schema = ..., include_table_schema = ...) -> str: ...
    def visit_create_schema(self, create) -> str: ...
    def visit_create_sequence(self, create) -> str: ...
    def visit_create_table(self, create) -> str: ...
    def visit_ddl(self, ddl, **kwargs) -> Any: ...
    def visit_drop_column_comment(self, drop) -> str: ...
    def visit_drop_constraint(self, drop) -> str: ...
    def visit_drop_index(self, drop) -> str: ...
    def visit_drop_schema(self, drop) -> str: ...
    def visit_drop_sequence(self, drop) -> str: ...
    def visit_drop_table(self, drop) -> str: ...
    def visit_drop_table_comment(self, drop) -> str: ...
    def visit_drop_view(self, drop) -> str: ...
    def visit_foreign_key_constraint(self, constraint) -> str: ...
    def visit_primary_key_constraint(self, constraint) -> str: ...
    def visit_set_column_comment(self, create) -> str: ...
    def visit_set_table_comment(self, create) -> str: ...
    def visit_unique_constraint(self, constraint) -> str: ...

class GenericTypeCompiler(TypeCompiler):
    dialect: Any
    def _render_string_type(self, type_, name) -> Any: ...
    def visit_BIGINT(self, type_, **kw) -> str: ...
    def visit_BINARY(self, type_, **kw) -> str: ...
    def visit_BLOB(self, type_, **kw) -> str: ...
    def visit_BOOLEAN(self, type_, **kw) -> str: ...
    def visit_CHAR(self, type_, **kw) -> Any: ...
    def visit_CLOB(self, type_, **kw) -> str: ...
    def visit_DATE(self, type_, **kw) -> str: ...
    def visit_DATETIME(self, type_, **kw) -> str: ...
    def visit_DECIMAL(self, type_, **kw) -> str: ...
    def visit_FLOAT(self, type_, **kw) -> str: ...
    def visit_INTEGER(self, type_, **kw) -> str: ...
    def visit_NCHAR(self, type_, **kw) -> Any: ...
    def visit_NCLOB(self, type_, **kw) -> str: ...
    def visit_NUMERIC(self, type_, **kw) -> str: ...
    def visit_NVARCHAR(self, type_, **kw) -> Any: ...
    def visit_REAL(self, type_, **kw) -> str: ...
    def visit_SMALLINT(self, type_, **kw) -> str: ...
    def visit_TEXT(self, type_, **kw) -> Any: ...
    def visit_TIME(self, type_, **kw) -> str: ...
    def visit_TIMESTAMP(self, type_, **kw) -> str: ...
    def visit_VARBINARY(self, type_, **kw) -> str: ...
    def visit_VARCHAR(self, type_, **kw) -> Any: ...
    def visit_big_integer(self, type_, **kw) -> Any: ...
    def visit_boolean(self, type_, **kw) -> Any: ...
    def visit_date(self, type_, **kw) -> Any: ...
    def visit_datetime(self, type_, **kw) -> Any: ...
    def visit_enum(self, type_, **kw) -> Any: ...
    def visit_float(self, type_, **kw) -> Any: ...
    def visit_integer(self, type_, **kw) -> Any: ...
    def visit_large_binary(self, type_, **kw) -> Any: ...
    def visit_null(self, type_, **kw) -> NoReturn: ...
    def visit_numeric(self, type_, **kw) -> Any: ...
    def visit_real(self, type_, **kw) -> Any: ...
    def visit_small_integer(self, type_, **kw) -> Any: ...
    def visit_string(self, type_, **kw) -> Any: ...
    def visit_text(self, type_, **kw) -> Any: ...
    def visit_time(self, type_, **kw) -> Any: ...
    def visit_type_decorator(self, type_, **kw) -> Any: ...
    def visit_unicode(self, type_, **kw) -> Any: ...
    def visit_unicode_text(self, type_, **kw) -> Any: ...
    def visit_user_defined(self, type_, **kw) -> Any: ...

class IdentifierPreparer:
    __doc__: str
    _double_percents: bool
    _r_identifiers: Any
    _strings: dict
    dialect: Any
    escape_quote: Any
    escape_to_quote: Any
    final_quote: Any
    format_constraint: Any
    illegal_initial_characters: set
    initial_quote: Any
    legal_characters: Pattern[str]
    omit_schema: Any
    quote_case_sensitive_collations: Any
    reserved_words: set
    schema_for_object: Any
    def __init__(self, dialect, initial_quote = ..., final_quote = ..., escape_quote = ..., quote_case_sensitive_collations = ..., omit_schema = ...) -> None: ...
    def _escape_identifier(self, value) -> Any: ...
    def _requires_quotes(self, value) -> Any: ...
    def _requires_quotes_illegal_chars(self, value) -> bool: ...
    def _unescape_identifier(self, value) -> Any: ...
    def _with_schema_translate(self: _TIdentifierPreparer, schema_translate_map) -> _TIdentifierPreparer: ...
    def format_alias(self, alias, name = ...) -> Any: ...
    def format_collation(self, collation_name) -> Any: ...
    def format_column(self, column, use_table = ..., name = ..., table_name = ..., use_schema = ...) -> Any: ...
    def format_index(self, index) -> Any: ...
    def format_label(self, label, name = ...) -> Any: ...
    def format_savepoint(self, savepoint, name = ...) -> Any: ...
    def format_schema(self, name) -> Any: ...
    def format_sequence(self, sequence, use_schema = ...) -> Any: ...
    def format_table(self, table, use_schema = ..., name = ...) -> Any: ...
    def format_table_seq(self, table, use_schema = ...) -> tuple: ...
    def quote(self, ident, force = ...) -> Any: ...
    def quote_identifier(self, value) -> Any: ...
    def quote_schema(self, schema, force = ...) -> Any: ...
    def unformat_identifiers(self, identifiers) -> Any: ...
    def validate_sql_phrase(self, element: _T0, reg) -> _T0: ...

class SQLCompiler(Compiled):
    __doc__: str
    _bind_processors: Any
    _create_result_map: Any
    _default_stack_entry: sqlalchemy.util._collections.immutabledict
    _init_cte_state: Any
    _key_getters_for_crud_column: Any
    _like_percent_literal: Any
    _nested_result: Callable[..., contextlib._GeneratorContextManager]
    _numeric_binds: Any
    _ordered_columns: Any
    _result_columns: Any
    _textual_ordered_columns: Any
    anon_map: prefix_anon_map
    ansi_bind_rules: bool
    bind: None
    bind_names: dict
    binds: dict
    bindtemplate: str
    can_execute: Any
    column_keys: Any
    compound_keywords: Dict[Any, str]
    contains_expanding_parameters: bool
    ctes: None
    ctes_recursive: bool
    dialect: Any
    execution_options: Any
    extract_map: Dict[str, str]
    inline: Any
    insert_prefetch: Tuple[()]
    insert_single_values_expr: Optional[str]
    isdelete: bool
    isinsert: bool
    isplaintext: bool
    isupdate: bool
    label_length: Any
    params: Any
    positional: Any
    positiontup: Any
    prefetch: list
    preparer: Any
    render_table_with_column_in_update_from: bool
    returning: None
    returning_precedes_values: bool
    schema_translate_map: None
    sql_compiler: Any
    stack: List[Dict[str, Any]]
    statement: Any
    string: Any
    truncated_names: dict
    update_prefetch: Tuple[()]
    def __init__(self, dialect, statement, column_keys = ..., inline = ..., **kwargs) -> None: ...
    def _add_to_result_map(self, keyname, name, objects, type_) -> None: ...
    def _anonymize(self, name) -> Any: ...
    def _apply_numbered_params(self) -> None: ...
    def _compose_select_body(self, text, select, inner_columns, froms, byfrom, kwargs) -> Any: ...
    def _display_froms_for_select(self, select, asfrom, lateral = ...) -> Any: ...
    def _emit_empty_in_warning(self) -> None: ...
    def _fallback_column_name(self, column) -> NoReturn: ...
    def _format_frame_clause(self, range_, **kw) -> str: ...
    def _generate_generic_binary(self, binary, opstring, eager_grouping = ..., **kw) -> Any: ...
    def _generate_generic_unary_modifier(self, unary, opstring, **kw) -> Any: ...
    def _generate_generic_unary_operator(self, unary, opstring, **kw) -> Any: ...
    def _generate_prefixes(self, stmt, prefixes, **kw) -> str: ...
    def _get_operator_dispatch(self, operator_, qualifier1, qualifier2) -> Any: ...
    def _label_select_column(self, select, column, populate_result_map, asfrom, column_clause_args, name = ..., within_columns_clause = ..., need_column_expressions = ...) -> Any: ...
    def _render_cte_clause(self) -> Any: ...
    def _setup_crud_hints(self, stmt, table_text) -> Tuple[dict, Any]: ...
    def _setup_select_hints(self, select) -> Tuple[Any, dict]: ...
    def _setup_select_stack(self, select, entry, asfrom, lateral) -> Any: ...
    def _transform_result_map_for_nested_joins(self, select, transformed_select) -> None: ...
    def _transform_select_for_nested_joins(self, select) -> Any: ...
    def _truncate_bindparam(self, bindparam) -> Any: ...
    def _truncated_identifier(self, ident_class, name) -> Any: ...
    def bindparam_string(self, name, positional_names = ..., expanding = ..., **kw) -> str: ...
    def construct_params(self, params = ..., _group_number = ..., _check = ...) -> dict: ...
    def default_from(self) -> str: ...
    def delete_extra_from_clause(self, update_stmt, from_table, extra_froms, from_hints, **kw) -> NoReturn: ...
    def delete_table_clause(self, delete_stmt, from_table, extra_froms) -> Any: ...
    def escape_literal_column(self, text) -> Any: ...
    def for_update_clause(self, select, **kw) -> str: ...
    def format_from_hint_text(self, sqltext, table, hint, iscrud) -> Any: ...
    def function_argspec(self, func, **kwargs) -> Any: ...
    def get_crud_hint_text(self, table, text) -> None: ...
    def get_cte_preamble(self, recursive) -> str: ...
    def get_from_hint_text(self, table, text) -> None: ...
    def get_render_as_alias_suffix(self, alias_name_text) -> str: ...
    def get_select_hint_text(self, byfroms) -> None: ...
    def get_select_precolumns(self, select, **kw) -> str: ...
    def get_statement_hint_text(self, hint_texts) -> str: ...
    def group_by_clause(self, select, **kw) -> str: ...
    def is_subquery(self) -> bool: ...
    def limit_clause(self, select, **kw) -> str: ...
    def order_by_clause(self, select, **kw) -> str: ...
    def post_process_text(self, text) -> Any: ...
    def render_literal_bindparam(self, bindparam, **kw) -> Any: ...
    def render_literal_value(self, value, type_) -> Any: ...
    def returning_clause(self, stmt, returning_cols) -> NoReturn: ...
    def update_from_clause(self, update_stmt, from_table, extra_froms, from_hints, **kw) -> NoReturn: ...
    def update_limit_clause(self, update_stmt) -> None: ...
    def update_tables_clause(self, update_stmt, from_table, extra_froms, **kw) -> Any: ...
    def visit_alias(self, alias, asfrom = ..., ashint = ..., iscrud = ..., fromhints = ..., **kwargs) -> Any: ...
    def visit_between_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_binary(self, binary, override_operator = ..., eager_grouping = ..., **kw) -> Any: ...
    def visit_bindparam(self, bindparam, within_columns_clause = ..., literal_binds = ..., skip_bind_expression = ..., **kwargs) -> Any: ...
    def visit_case(self, clause, **kwargs) -> str: ...
    def visit_cast(self, cast, **kwargs) -> str: ...
    def visit_clauselist(self, clauselist, **kw) -> str: ...
    def visit_collation(self, element, **kw) -> Any: ...
    def visit_column(self, column, add_to_result_map = ..., include_table = ..., **kwargs) -> Any: ...
    def visit_compound_select(self, cs, asfrom = ..., parens = ..., compound_index = ..., **kwargs) -> Any: ...
    def visit_contains_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_cte(self, cte, asfrom = ..., ashint = ..., fromhints = ..., visiting_cte = ..., **kwargs) -> Any: ...
    def visit_custom_op_binary(self, element, operator, **kw) -> Any: ...
    def visit_custom_op_unary_modifier(self, element, operator, **kw) -> Any: ...
    def visit_custom_op_unary_operator(self, element, operator, **kw) -> Any: ...
    def visit_delete(self, delete_stmt, asfrom = ..., **kw) -> Any: ...
    def visit_empty_in_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_empty_notin_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_empty_set_expr(self, element_types) -> NoReturn: ...
    def visit_endswith_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_extract(self, extract, **kwargs) -> str: ...
    def visit_false(self, expr, **kw) -> str: ...
    def visit_fromclause(self, fromclause, **kwargs) -> Any: ...
    def visit_funcfilter(self, funcfilter, **kwargs) -> str: ...
    def visit_function(self, func, add_to_result_map = ..., **kwargs) -> Any: ...
    def visit_function_as_comparison_op_binary(self, element, operator, **kw) -> Any: ...
    def visit_grouping(self, grouping, asfrom = ..., **kwargs) -> str: ...
    def visit_ilike_op_binary(self, binary, operator, **kw) -> str: ...
    def visit_index(self, index, **kwargs) -> Any: ...
    def visit_insert(self, insert_stmt, asfrom = ..., **kw) -> Any: ...
    def visit_isfalse_unary_operator(self, element, operator, **kw) -> str: ...
    def visit_istrue_unary_operator(self, element, operator, **kw) -> Any: ...
    def visit_join(self, join, asfrom = ..., **kwargs) -> Any: ...
    def visit_label(self, label, add_to_result_map = ..., within_label_clause = ..., within_columns_clause = ..., render_label_as_label = ..., **kw) -> Any: ...
    def visit_label_reference(self, element, within_columns_clause = ..., **kwargs) -> Any: ...
    def visit_lateral(self, lateral, **kw) -> str: ...
    def visit_like_op_binary(self, binary, operator, **kw) -> str: ...
    def visit_mod_binary(self, binary, operator, **kw) -> Any: ...
    def visit_next_value_func(self, next_value, **kw) -> Any: ...
    def visit_notbetween_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_notcontains_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_notendswith_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_notilike_op_binary(self, binary, operator, **kw) -> str: ...
    def visit_notlike_op_binary(self, binary, operator, **kw) -> str: ...
    def visit_notmatch_op_binary(self, binary, operator, **kw) -> str: ...
    def visit_notstartswith_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_null(self, expr, **kw) -> str: ...
    def visit_over(self, over, **kwargs) -> str: ...
    def visit_release_savepoint(self, savepoint_stmt) -> str: ...
    def visit_rollback_to_savepoint(self, savepoint_stmt) -> str: ...
    def visit_savepoint(self, savepoint_stmt) -> str: ...
    def visit_select(self, select, asfrom = ..., parens = ..., fromhints = ..., compound_index = ..., nested_join_translation = ..., select_wraps_for = ..., lateral = ..., **kwargs) -> Any: ...
    def visit_sequence(self, sequence, **kw) -> NoReturn: ...
    def visit_startswith_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_table(self, table, asfrom = ..., iscrud = ..., ashint = ..., fromhints = ..., use_schema = ..., **kwargs) -> Any: ...
    def visit_tablesample(self, tablesample, asfrom = ..., **kw) -> str: ...
    def visit_text_as_from(self, taf, compound_index = ..., asfrom = ..., parens = ..., **kw) -> Any: ...
    def visit_textclause(self, textclause, **kw) -> str: ...
    def visit_textual_label_reference(self, element, within_columns_clause = ..., **kwargs) -> Any: ...
    def visit_true(self, expr, **kw) -> str: ...
    def visit_type_coerce(self, type_coerce, **kw) -> Any: ...
    def visit_typeclause(self, typeclause, **kw) -> Any: ...
    def visit_unary(self, unary, **kw) -> Any: ...
    def visit_update(self, update_stmt, asfrom = ..., **kw) -> Any: ...
    def visit_withingroup(self, withingroup, **kwargs) -> str: ...

class StrSQLCompiler(SQLCompiler):
    __doc__: str
    _numeric_binds: Any
    _result_columns: List[nothing]
    anon_map: prefix_anon_map
    bind: None
    bind_names: Dict[nothing, nothing]
    binds: Dict[nothing, nothing]
    bindtemplate: str
    can_execute: Any
    column_keys: Any
    ctes: None
    dialect: Any
    execution_options: Any
    inline: Any
    label_length: Any
    positional: Any
    positiontup: List[nothing]
    preparer: Any
    schema_translate_map: None
    stack: List[nothing]
    statement: Any
    string: Any
    truncated_names: Dict[nothing, nothing]
    def _fallback_column_name(self, column) -> str: ...
    def delete_extra_from_clause(self, update_stmt, from_table, extra_froms, from_hints, **kw) -> str: ...
    def get_from_hint_text(self, table, text) -> str: ...
    def returning_clause(self, stmt, returning_cols) -> str: ...
    def update_from_clause(self, update_stmt, from_table, extra_froms, from_hints, **kw) -> str: ...
    def visit_getitem_binary(self, binary, operator, **kw) -> str: ...
    def visit_json_getitem_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_json_path_getitem_op_binary(self, binary, operator, **kw) -> Any: ...
    def visit_sequence(self, seq, **kw) -> str: ...

class StrSQLTypeCompiler(GenericTypeCompiler):
    dialect: Any
    def __getattr__(self, key) -> Callable: ...
    def _visit_unknown(self, type_, **kw) -> str: ...

class TypeCompiler(Any):
    __doc__: str
    dialect: Any
    ensure_kwarg: str
    def __init__(self, dialect) -> None: ...
    def process(self, type_, **kw) -> Any: ...

class _CompileLabel(sqlalchemy.sql.visitors.Visitable):
    __slots__ = ["element", "name"]
    __doc__: str
    __visit_name__: str
    _alt_names: tuple
    element: Any
    name: Any
    proxy_set: Any
    type: Any
    def __init__(self, col, name, alt_names = ...) -> None: ...
    def self_group(self: _T_CompileLabel, **kw) -> _T_CompileLabel: ...

class prefix_anon_map(dict):
    __doc__: str
    def __missing__(self, key) -> Any: ...
