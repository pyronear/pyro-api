# (generated with --quick)

import collections
from typing import Any, Dict, Generator, Iterator, List, Type, TypeVar, Union

__all__: List[str]
deque: Type[collections.deque]
exc: module
operator: module
util: module

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')
_TClauseVisitor = TypeVar('_TClauseVisitor', bound=ClauseVisitor)

class ClauseVisitor:
    __doc__: str
    __traverse_options__: Dict[nothing, nothing]
    _visitor_dict: Any
    visitor_iterator: Generator[Any, Any, None]
    def chain(self: _TClauseVisitor, visitor) -> _TClauseVisitor: ...
    def iterate(self, obj) -> Any: ...
    def traverse(self, obj) -> Any: ...
    def traverse_single(self, obj, **kw) -> Any: ...

class CloningVisitor(ClauseVisitor):
    __doc__: str
    def copy_and_process(self, list_) -> Any: ...
    def traverse(self, obj) -> Any: ...

class ReplacingCloningVisitor(CloningVisitor):
    __doc__: str
    def replace(self, elem) -> None: ...
    def traverse(self, obj) -> Any: ...

class Visitable(Any):
    __doc__: str

class VisitableType(type):
    __doc__: str
    def __init__(cls: VisitableType, clsname, bases, clsdict) -> None: ...

def _generate_dispatch(cls) -> None: ...
def cloned_traverse(obj, opts, visitors) -> Any: ...
def iterate(obj: _T0, opts) -> Union[Iterator, List[_T0]]: ...
def iterate_depthfirst(obj: _T0, opts) -> Union[Iterator, List[_T0]]: ...
def replacement_traverse(obj, opts, replace) -> Any: ...
def traverse(obj, opts, visitors) -> Any: ...
def traverse_depthfirst(obj, opts, visitors) -> Any: ...
def traverse_using(iterator, obj: _T1, visitors) -> _T1: ...
