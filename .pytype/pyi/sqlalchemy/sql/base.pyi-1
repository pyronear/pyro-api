# (generated with --quick)

from typing import Any, Dict, NoReturn, Optional, Tuple, TypeVar

ClauseVisitor: Any
NO_ARG: Any
PARSE_AUTOCOMMIT: Any
_generative: Any
exc: Any
itertools: module
re: module
util: module

_TGenerative = TypeVar('_TGenerative', bound=Generative)
_TImmutable = TypeVar('_TImmutable', bound=Immutable)

class ColumnCollection(Any):
    __doc__: str
    __eq__: Any
    __hash__: None
    def __contains__(self, other) -> Any: ...
    def __delitem__(self, key) -> NoReturn: ...
    def __getstate__(self) -> Dict[str, Any]: ...
    def __init__(self, *columns) -> None: ...
    def __setattr__(self, key, obj) -> NoReturn: ...
    def __setitem__(self, key, value) -> None: ...
    def __setstate__(self, state) -> None: ...
    def __str__(self) -> str: ...
    def add(self, column) -> None: ...
    def as_immutable(self) -> ImmutableColumnCollection: ...
    def clear(self) -> NoReturn: ...
    def contains_column(self, col) -> bool: ...
    def extend(self, iter_) -> None: ...
    def remove(self, column) -> None: ...
    def replace(self, column) -> None: ...
    def update(self, iter_) -> None: ...

class ColumnSet(Any):
    __eq__: Any
    def __add__(self, other) -> list: ...
    def __hash__(self) -> int: ...
    def contains_column(self, col) -> bool: ...
    def extend(self, cols) -> None: ...

class DialectKWArgs:
    __doc__: str
    _kw_reg_for_dialect: Any
    _kw_registry: Any
    dialect_kwargs: Any
    dialect_options: Any
    kwargs: Any
    def _kw_reg_for_dialect_cls(self, dialect_name) -> _DialectArgDict: ...
    def _validate_dialect_kwargs(self, kwargs) -> None: ...
    @classmethod
    def argument_for(cls, dialect_name, argument_name, default) -> None: ...

class Executable(Generative):
    __doc__: str
    _bind: None
    _execution_options: Any
    bind: Any
    execution_options: Any
    supports_execution: bool
    def execute(self, *multiparams, **params) -> Any: ...
    def get_execution_options(self) -> Any: ...
    def scalar(self, *multiparams, **params) -> Any: ...

class Generative:
    __dict__: Dict[str, Any]
    __doc__: str
    def _generate(self: _TGenerative) -> _TGenerative: ...

class Immutable:
    __doc__: str
    def _clone(self: _TImmutable) -> _TImmutable: ...
    def params(self, *optionaldict, **kwargs) -> NoReturn: ...
    def unique_params(self, *optionaldict, **kwargs) -> NoReturn: ...

class ImmutableColumnCollection(Any, ColumnCollection):
    extend: Any
    remove: Any
    def __init__(self, data, all_columns) -> None: ...

class SchemaEventTarget:
    __doc__: str
    def _set_parent(self, parent) -> None: ...
    def _set_parent_with_dispatch(self, parent) -> None: ...

class SchemaVisitor(Any):
    __doc__: str
    __traverse_options__: Dict[str, bool]

class _DialectArgDict(Any):
    __doc__: str
    _defaults: dict
    _non_defaults: dict
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self) -> None: ...
    def __iter__(self) -> setiterator: ...
    def __len__(self) -> int: ...
    def __setitem__(self, key, value) -> None: ...

class _DialectArgView(Any):
    __doc__: str
    obj: Any
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self, obj) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __setitem__(self, key, value) -> None: ...
    def _key(self, key) -> Optional[Tuple[Any, Any]]: ...

def _bind_or_error(schemaitem, msg = ...) -> Any: ...
def _from_objects(*elements) -> itertools.chain[nothing]: ...
