# (generated with --quick)

from typing import Any

event: Any
util: module

class ConnectionProxy:
    __doc__: str
    @classmethod
    def _adapt_listener(cls, self, listener) -> None: ...
    def begin(self, conn, begin) -> Any: ...
    def begin_twophase(self, conn, begin_twophase, xid) -> Any: ...
    def commit(self, conn, commit) -> Any: ...
    def commit_twophase(self, conn, commit_twophase, xid, is_prepared) -> Any: ...
    def cursor_execute(self, execute, cursor, statement, parameters, context, executemany) -> Any: ...
    def execute(self, conn, execute, clauseelement, *multiparams, **params) -> Any: ...
    def prepare_twophase(self, conn, prepare_twophase, xid) -> Any: ...
    def release_savepoint(self, conn, release_savepoint, name, context) -> Any: ...
    def rollback(self, conn, rollback) -> Any: ...
    def rollback_savepoint(self, conn, rollback_savepoint, name, context) -> Any: ...
    def rollback_twophase(self, conn, rollback_twophase, xid, is_prepared) -> Any: ...
    def savepoint(self, conn, savepoint, name = ...) -> Any: ...

class PoolListener:
    __doc__: str
    @classmethod
    def _adapt_listener(cls, self, listener) -> None: ...
    def checkin(self, dbapi_con, con_record) -> None: ...
    def checkout(self, dbapi_con, con_record, con_proxy) -> None: ...
    def connect(self, dbapi_con, con_record) -> None: ...
    def first_connect(self, dbapi_con, con_record) -> None: ...
