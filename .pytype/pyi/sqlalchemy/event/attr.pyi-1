# (generated with --quick)

import __future__
import _weakref
import itertools
from typing import Any, Callable, FrozenSet, NoReturn, Tuple, Type, TypeVar

absolute_import: __future__._Feature
chain: Type[itertools.chain]
collections: module
exc: Any
legacy: Any
registry: Any
threading: Any
util: module
weakref: module
with_statement: __future__._Feature

_T_ClsLevelDispatch = TypeVar('_T_ClsLevelDispatch', bound=_ClsLevelDispatch)
_T_JoinedListener = TypeVar('_T_JoinedListener', bound=_JoinedListener)
_T_ListenerCollection = TypeVar('_T_ListenerCollection', bound=_ListenerCollection)

class RefCollection(Any):
    __slots__ = ["ref"]
    def _memoized_attr_ref(self) -> _weakref.ReferenceType[nothing]: ...

class _ClsLevelDispatch(RefCollection):
    __slots__ = ["__weakref__", "_clslevel", "arg_names", "has_kw", "legacy_signatures", "name"]
    __doc__: str
    _clslevel: weakref.WeakKeyDictionary[nothing, nothing]
    arg_names: Any
    has_kw: bool
    legacy_signatures: list
    name: Any
    def __init__(self, parent_dispatch_cls, fn) -> None: ...
    def _adjust_fn_spec(self, fn, named) -> Any: ...
    def _assign_cls_collection(self, target) -> None: ...
    def _wrap_fn_for_kw(self, fn) -> Callable: ...
    def append(self, event_key, propagate) -> NoReturn: ...
    def clear(self) -> None: ...
    def for_modify(self: _T_ClsLevelDispatch, obj) -> _T_ClsLevelDispatch: ...
    def insert(self, event_key, propagate) -> NoReturn: ...
    def remove(self, event_key) -> Any: ...
    def update_subclass(self, target) -> None: ...

class _CompoundListener(_InstanceLevelDispatch):
    __slots__ = ["_exec_once", "_exec_once_mutex"]
    _exec_once: bool
    def __bool__(self) -> bool: ...
    def __call__(self, *args, **kw) -> None: ...
    def __iter__(self) -> itertools.chain[nothing]: ...
    def __len__(self) -> int: ...
    def __nonzero__(self) -> bool: ...
    def _exec_once_impl(self, retry_on_exception, *args, **kw) -> None: ...
    def _memoized_attr__exec_once_mutex(self) -> Any: ...
    def exec_once(self, *args, **kw) -> None: ...
    def exec_once_unless_exception(self, *args, **kw) -> None: ...

class _EmptyListener(_InstanceLevelDispatch):
    __slots__ = ["name", "parent", "parent_listeners"]
    __doc__: str
    listeners: Tuple[()]
    name: Any
    parent: Any
    parent_listeners: Any
    propagate: FrozenSet[nothing]
    def __bool__(self) -> bool: ...
    def __call__(self, *args, **kw) -> None: ...
    def __init__(self, parent, target_cls) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __nonzero__(self) -> bool: ...
    def _needs_modify(self, *args, **kw) -> NoReturn: ...
    def append(self, *args, **kw) -> NoReturn: ...
    def clear(self, *args, **kw) -> NoReturn: ...
    def exec_once(self, *args, **kw) -> NoReturn: ...
    def exec_once_unless_exception(self, *args, **kw) -> NoReturn: ...
    def for_modify(self, obj) -> _ListenerCollection: ...
    def insert(self, *args, **kw) -> NoReturn: ...
    def remove(self, *args, **kw) -> NoReturn: ...

class _InstanceLevelDispatch(RefCollection):
    __slots__ = []
    def _adjust_fn_spec(self, fn, named) -> Any: ...

class _JoinedListener(_CompoundListener):
    __slots__ = ["local", "name", "parent", "parent_listeners"]
    _exec_once: bool
    listeners: Any
    local: Any
    name: Any
    parent: Any
    parent_listeners: Any
    def __init__(self, parent, name, local) -> None: ...
    def _adjust_fn_spec(self, fn, named) -> Any: ...
    def append(self, event_key, propagate) -> None: ...
    def clear(self) -> NoReturn: ...
    def for_modify(self: _T_JoinedListener, obj) -> _T_JoinedListener: ...
    def insert(self, event_key, propagate) -> None: ...
    def remove(self, event_key) -> None: ...

class _ListenerCollection(_CompoundListener):
    __slots__ = ["__weakref__", "listeners", "name", "parent", "parent_listeners", "propagate"]
    __doc__: str
    _exec_once: bool
    listeners: collections.deque
    name: Any
    parent: Any
    parent_listeners: Any
    propagate: set
    def __init__(self, parent, target_cls) -> None: ...
    def _update(self, other, only_propagate = ...) -> None: ...
    def append(self, event_key, propagate) -> None: ...
    def clear(self) -> None: ...
    def for_modify(self: _T_ListenerCollection, obj) -> _T_ListenerCollection: ...
    def insert(self, event_key, propagate) -> None: ...
    def remove(self, event_key) -> None: ...

class _empty_collection:
    def __iter__(self) -> listiterator[nothing]: ...
    def append(self, element) -> None: ...
    def clear(self) -> None: ...
    def extend(self, other) -> None: ...
    def remove(self, element) -> None: ...
