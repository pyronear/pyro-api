# (generated with --quick)

import __future__
from typing import Any, Tuple, TypeVar, Union

_collection_to_key: collections.defaultdict
_key_to_collection: collections.defaultdict
absolute_import: __future__._Feature
collections: module
exc: Any
types: module
util: module
weakref: module

_T_EventKey = TypeVar('_T_EventKey', bound=_EventKey)

class _EventKey:
    __slots__ = ["dispatch_target", "fn", "fn_key", "fn_wrap", "identifier", "target"]
    __doc__: str
    _key: Tuple[int, Any, Any]
    _listen_fn: Any
    dispatch_target: Any
    fn: Any
    fn_key: Union[int, Tuple[int, int]]
    fn_wrap: Any
    identifier: Any
    target: Any
    def __init__(self, target, identifier, fn, dispatch_target, _fn_wrap = ...) -> None: ...
    def append_to_list(self, owner, list_) -> bool: ...
    def base_listen(self, propagate = ..., insert = ..., named = ..., retval = ...) -> None: ...
    def contains(self) -> bool: ...
    def listen(self, *args, **kw) -> None: ...
    def prepend_to_list(self, owner, list_) -> bool: ...
    def remove(self) -> None: ...
    def remove_from_list(self, owner, list_) -> None: ...
    def with_dispatch_target(self: _T_EventKey, dispatch_target) -> _T_EventKey: ...
    def with_wrapper(self: _T_EventKey, fn_wrap) -> _T_EventKey: ...

def _clear(owner, elements) -> None: ...
def _collection_gced(ref) -> None: ...
def _removed_from_collection(event_key, owner) -> None: ...
def _stored_in_collection(event_key, owner) -> bool: ...
def _stored_in_collection_multi(newowner, oldowner, elements) -> None: ...
