# (generated with --quick)

import collections
from typing import Any, List, Type

__all__: List[str]
deque: Type[collections.deque]
threading: module

class Empty(Exception):
    __doc__: str

class Full(Exception):
    __doc__: str

class Queue:
    maxsize: Any
    mutex: Any
    not_empty: Any
    not_full: Any
    queue: collections.deque
    use_lifo: Any
    def __init__(self, maxsize = ..., use_lifo = ...) -> None: ...
    def _empty(self) -> bool: ...
    def _full(self) -> Any: ...
    def _get(self) -> Any: ...
    def _init(self, maxsize) -> None: ...
    def _put(self, item) -> None: ...
    def _qsize(self) -> int: ...
    def empty(self) -> Any: ...
    def full(self) -> Any: ...
    def get(self, block = ..., timeout = ...) -> Any: ...
    def get_nowait(self) -> Any: ...
    def put(self, item, block = ..., timeout = ...) -> None: ...
    def put_nowait(self, item) -> Any: ...
    def qsize(self) -> Any: ...

def _time() -> float: ...
