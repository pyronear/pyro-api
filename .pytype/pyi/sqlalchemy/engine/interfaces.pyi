# (generated with --quick)

import sqlalchemy.sql.compiler
from typing import Any, NoReturn, Type

Compiled: Type[sqlalchemy.sql.compiler.Compiled]
TypeCompiler: Type[sqlalchemy.sql.compiler.TypeCompiler]
util: module

class Connectable:
    __doc__: str
    contextual_connect: Any
    create: Any
    drop: Any
    engine: None
    def _contextual_connect(self) -> NoReturn: ...
    def _execute_clauseelement(self, elem, multiparams = ..., params = ...) -> NoReturn: ...
    def _run_visitor(self, visitorcallable, element, **kwargs) -> NoReturn: ...
    def connect(self, **kwargs) -> None: ...
    def execute(self, object_, *multiparams, **params) -> NoReturn: ...
    def scalar(self, object_, *multiparams, **params) -> NoReturn: ...

class CreateEnginePlugin:
    __doc__: str
    url: Any
    def __init__(self, url, kwargs) -> None: ...
    def engine_created(self, engine) -> None: ...
    def handle_dialect_kwargs(self, dialect_cls, dialect_args) -> None: ...
    def handle_pool_kwargs(self, pool_cls, pool_args) -> None: ...

class Dialect:
    __doc__: str
    _has_events: bool
    get_primary_keys: Any
    def _get_default_schema_name(self, connection) -> NoReturn: ...
    def _get_server_version_info(self, connection) -> NoReturn: ...
    def connect(self, *cargs, **cparams) -> None: ...
    def create_connect_args(self, url) -> NoReturn: ...
    def create_xid(self) -> NoReturn: ...
    def denormalize_name(self, name) -> NoReturn: ...
    def do_begin(self, dbapi_connection) -> NoReturn: ...
    def do_begin_twophase(self, connection, xid) -> NoReturn: ...
    def do_close(self, dbapi_connection) -> NoReturn: ...
    def do_commit(self, dbapi_connection) -> NoReturn: ...
    def do_commit_twophase(self, connection, xid, is_prepared = ..., recover = ...) -> NoReturn: ...
    def do_execute(self, cursor, statement, parameters, context = ...) -> NoReturn: ...
    def do_execute_no_params(self, cursor, statement, parameters, context = ...) -> NoReturn: ...
    def do_executemany(self, cursor, statement, parameters, context = ...) -> NoReturn: ...
    def do_prepare_twophase(self, connection, xid) -> NoReturn: ...
    def do_recover_twophase(self, connection) -> NoReturn: ...
    def do_release_savepoint(self, connection, name) -> NoReturn: ...
    def do_rollback(self, dbapi_connection) -> NoReturn: ...
    def do_rollback_to_savepoint(self, connection, name) -> NoReturn: ...
    def do_rollback_twophase(self, connection, xid, is_prepared = ..., recover = ...) -> NoReturn: ...
    def do_savepoint(self, connection, name) -> NoReturn: ...
    @classmethod
    def engine_created(cls, engine) -> None: ...
    def get_check_constraints(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    def get_columns(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    @classmethod
    def get_dialect_cls(cls, url) -> Type[Dialect]: ...
    def get_foreign_keys(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    def get_indexes(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    def get_isolation_level(self, dbapi_conn) -> NoReturn: ...
    def get_pk_constraint(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    def get_table_comment(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    def get_table_names(self, connection, schema = ..., **kw) -> NoReturn: ...
    def get_temp_table_names(self, connection, schema = ..., **kw) -> NoReturn: ...
    def get_temp_view_names(self, connection, schema = ..., **kw) -> NoReturn: ...
    def get_unique_constraints(self, connection, table_name, schema = ..., **kw) -> NoReturn: ...
    def get_view_definition(self, connection, view_name, schema = ..., **kw) -> NoReturn: ...
    def get_view_names(self, connection, schema = ..., **kw) -> NoReturn: ...
    def has_sequence(self, connection, sequence_name, schema = ...) -> NoReturn: ...
    def has_table(self, connection, table_name, schema = ...) -> NoReturn: ...
    def initialize(self, connection) -> None: ...
    def is_disconnect(self, e, connection, cursor) -> NoReturn: ...
    @classmethod
    def load_provisioning(cls) -> None: ...
    def normalize_name(self, name) -> NoReturn: ...
    def on_connect(self) -> None: ...
    def reflecttable(self, connection, table, include_columns, exclude_columns, resolve_fks) -> NoReturn: ...
    def reset_isolation_level(self, dbapi_conn) -> NoReturn: ...
    def set_isolation_level(self, dbapi_conn, level) -> NoReturn: ...
    @classmethod
    def type_descriptor(cls, typeobj) -> NoReturn: ...

class ExceptionContext:
    __doc__: str
    chained_exception: None
    connection: None
    cursor: None
    engine: None
    execution_context: None
    invalidate_pool_on_disconnect: bool
    is_disconnect: None
    original_exception: None
    parameters: None
    sqlalchemy_exception: None
    statement: None

class ExecutionContext:
    __doc__: str
    exception: None
    is_disconnect: None
    def create_cursor(self) -> NoReturn: ...
    def get_rowcount(self) -> NoReturn: ...
    def handle_dbapi_exception(self, e) -> NoReturn: ...
    def lastrow_has_defaults(self) -> NoReturn: ...
    def post_exec(self) -> NoReturn: ...
    def pre_exec(self) -> NoReturn: ...
    def result(self) -> NoReturn: ...
    def should_autocommit_text(self, statement) -> NoReturn: ...
