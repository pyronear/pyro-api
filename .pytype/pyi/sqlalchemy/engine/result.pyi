# (generated with --quick)

import sqlalchemy.sql.sqltypes
from typing import Any, Callable, Dict, Generator, Optional, Tuple, Type, TypeVar

BaseRowProxy: Any
_baserowproxy_usecext: bool
collections: module
exc: module
expression: module
operator: module
safe_rowproxy_reconstructor: Any
sql_util: module
sqltypes: module
util: module

_T0 = TypeVar('_T0')

class BufferedColumnResultProxy(ResultProxy):
    __doc__: str
    _echo: Any
    _process_row: Type[BufferedColumnRow]
    _saved_cursor: Any
    connection: Any
    context: Any
    cursor: Any
    dialect: Any
    def _init_metadata(self) -> None: ...
    def fetchall(self) -> list: ...
    def fetchmany(self, size = ...) -> Any: ...

class BufferedColumnRow(RowProxy):
    def __init__(self, parent, row, processors, keymap) -> None: ...

class BufferedRowResultProxy(ResultProxy):
    _BufferedRowResultProxy__rowbuffer: collections.deque
    __doc__: str
    _bufsize: Any
    _echo: Any
    _max_row_buffer: Any
    _saved_cursor: Any
    connection: Any
    context: Any
    cursor: Any
    dialect: Any
    size_growth: Dict[int, int]
    def _BufferedRowResultProxy__buffer_rows(self) -> None: ...
    def _fetchall_impl(self) -> Any: ...
    def _fetchmany_impl(self, size = ...) -> Any: ...
    def _fetchone_impl(self) -> Any: ...
    def _init_metadata(self) -> None: ...
    def _soft_close(self, **kw) -> None: ...

class FullyBufferedResultProxy(ResultProxy):
    _FullyBufferedResultProxy__rowbuffer: Any
    __doc__: str
    _echo: Any
    _saved_cursor: Any
    connection: Any
    context: Any
    cursor: Any
    dialect: Any
    def _buffer_rows(self) -> collections.deque: ...
    def _fetchall_impl(self) -> Any: ...
    def _fetchmany_impl(self, size = ...) -> Any: ...
    def _fetchone_impl(self) -> Any: ...
    def _init_metadata(self) -> None: ...
    def _soft_close(self, **kw) -> None: ...

class ResultMetaData:
    __slots__ = ["_keymap", "_orig_processors", "_processors", "case_sensitive", "keys", "matched_on_name"]
    __doc__: str
    _keymap: dict
    _orig_processors: None
    _processors: Any
    case_sensitive: Any
    keys: Any
    matched_on_name: Any
    def __getstate__(self) -> Dict[str, Any]: ...
    def __init__(self, parent, cursor_description) -> None: ...
    def __setstate__(self, state) -> None: ...
    def _colnames_from_description(self, context, cursor_description) -> Generator[Tuple[int, Any, Any, Any], Any, None]: ...
    @classmethod
    def _create_result_map(cls, result_columns, case_sensitive = ...) -> dict: ...
    def _getter(self, key, raiseerr = ...) -> Optional[Callable[[Any], Any]]: ...
    def _has_key(self, key) -> bool: ...
    def _key_fallback(self, key, err, raiseerr = ...) -> Any: ...
    def _merge_cols_by_name(self, context, cursor_description, result_columns) -> Generator[Tuple[Any, Any, Any, Any, Any, Any], Any, None]: ...
    def _merge_cols_by_none(self, context, cursor_description) -> Generator[Tuple[Any, Any, sqlalchemy.sql.sqltypes.NullType, Any, None, Any], Any, None]: ...
    def _merge_cursor_description(self, context, cursor_description, result_columns, num_ctx_cols, cols_are_ordered, textual_ordered) -> Any: ...
    def _merge_textual_cols_by_position(self, context, cursor_description, result_columns) -> Generator[Tuple[Any, Any, Any, Any, Any, Any], Any, None]: ...

class ResultProxy:
    __doc__: str
    _autoclose_connection: bool
    _echo: Any
    _metadata: Any
    _process_row: Type[RowProxy]
    _saved_cursor: Any
    _soft_closed: bool
    closed: bool
    connection: Any
    context: Any
    cursor: Any
    dialect: Any
    inserted_primary_key: Any
    is_insert: Any
    lastrowid: Any
    out_parameters: None
    returned_defaults: Any
    returns_rows: bool
    rowcount: Any
    def __init__(self, context) -> None: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def __next__(self) -> Any: ...
    def _cursor_description(self) -> Any: ...
    def _fetchall_impl(self) -> Any: ...
    def _fetchmany_impl(self, size = ...) -> Any: ...
    def _fetchone_impl(self) -> Any: ...
    def _getter(self, key, raiseerr = ...) -> Any: ...
    def _has_key(self, key) -> Any: ...
    def _init_metadata(self) -> None: ...
    def _non_result(self, default: _T0, err = ...) -> _T0: ...
    def _soft_close(self) -> None: ...
    def close(self) -> None: ...
    def fetchall(self) -> Any: ...
    def fetchmany(self, size = ...) -> Any: ...
    def fetchone(self) -> Any: ...
    def first(self) -> Any: ...
    def keys(self) -> Any: ...
    def last_inserted_params(self) -> Any: ...
    def last_updated_params(self) -> Any: ...
    def lastrow_has_defaults(self) -> Any: ...
    def next(self) -> Any: ...
    def postfetch_cols(self) -> Any: ...
    def prefetch_cols(self) -> Any: ...
    def process_rows(self, rows) -> Any: ...
    def scalar(self) -> Any: ...
    def supports_sane_multi_rowcount(self) -> Any: ...
    def supports_sane_rowcount(self) -> Any: ...

class RowProxy(Any):
    __slots__ = []
    __doc__: str
    __hash__: None
    _keymap: Any
    _parent: Any
    _processors: Any
    _row: Any
    def __contains__(self, key) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Dict[str, Any]: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state) -> None: ...
    def _op(self, other, op) -> Any: ...
    def has_key(self, key) -> Any: ...
    def items(self) -> Any: ...
    def iterkeys(self) -> Any: ...
    def itervalues(self) -> bytearray_iterator: ...
    def keys(self) -> Any: ...
    def values(self) -> Any: ...

def rowproxy_reconstructor(cls, state) -> Any: ...
