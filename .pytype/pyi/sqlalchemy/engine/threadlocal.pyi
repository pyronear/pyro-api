# (generated with --quick)

import sqlalchemy.engine.base
from typing import Any, Type, TypeVar

base: module
util: module
weakref: module

_TTLConnection = TypeVar('_TTLConnection', bound=TLConnection)
_TTLEngine = TypeVar('_TTLEngine', bound=TLEngine)

class TLConnection(sqlalchemy.engine.base.Connection):
    _TLConnection__opencount: int
    def __init__(self, *arg, **kw) -> None: ...
    def _force_close(self) -> None: ...
    def _increment_connect(self: _TTLConnection) -> _TTLConnection: ...
    def close(self) -> None: ...

class TLEngine(sqlalchemy.engine.base.Engine):
    __doc__: str
    __init__: Any
    _connections: Any
    _tl_connection_cls: Type[TLConnection]
    closed: Any
    def __enter__(self: _TTLEngine) -> _TTLEngine: ...
    def __exit__(self, type_, value, traceback) -> None: ...
    def __repr__(self) -> str: ...
    def _contextual_connect(self, **kw) -> Any: ...
    def begin(self: _TTLEngine) -> _TTLEngine: ...
    def begin_nested(self: _TTLEngine) -> _TTLEngine: ...
    def begin_twophase(self: _TTLEngine, xid = ...) -> _TTLEngine: ...
    def close(self) -> None: ...
    def commit(self) -> None: ...
    def contextual_connect(self, **kw) -> Any: ...
    def dispose(self) -> None: ...
    def prepare(self) -> None: ...
    def rollback(self) -> None: ...
