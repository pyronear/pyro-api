# (generated with --quick)

import __future__
import sqlalchemy.log
from typing import Any, Callable, Optional, Type, TypeVar, Union

Connectable: Any
ExceptionContext: Any
_distill_params: Any
contextlib: module
exc: Any
interfaces: Any
log: module
schema: Any
sql_util: Any
sys: module
util: module
with_statement: __future__._Feature

_T0 = TypeVar('_T0')
_TConnection = TypeVar('_TConnection', bound=Connection)
_TTransaction = TypeVar('_TTransaction', bound=Transaction)

class Connection(Any):
    _Connection__branch: bool
    _Connection__branch_from: Any
    _Connection__can_reconnect: bool
    _Connection__connection: Any
    _Connection__invalid: bool
    _Connection__savepoint_seq: int
    _Connection__transaction: Any
    __doc__: str
    _connection_is_valid: Any
    _echo: Any
    _execution_options: Any
    _has_events: Any
    _is_disconnect: Any
    _reentrant_error: bool
    _root: Any
    _still_open_and_connection_is_valid: Any
    closed: bool
    connection: Any
    default_isolation_level: Any
    dialect: Any
    dispatch: Any
    engine: Any
    info: Any
    invalidated: Any
    schema_for_object: Any
    should_close_with_result: Any
    def __enter__(self: _TConnection) -> _TConnection: ...
    def __exit__(self, type_, value, traceback) -> None: ...
    def __init__(self, engine, connection = ..., close_with_result = ..., _branch_from = ..., _execution_options = ..., _dispatch = ..., _has_events = ...) -> None: ...
    def _autorollback(self) -> None: ...
    def _begin_impl(self, transaction) -> None: ...
    def _begin_twophase_impl(self, transaction) -> None: ...
    def _branch(self) -> Any: ...
    def _clone(self) -> Any: ...
    def _commit_impl(self, autocommit = ...) -> None: ...
    def _commit_twophase_impl(self, xid, is_prepared) -> None: ...
    def _contextual_connect(self, **kwargs) -> Any: ...
    def _cursor_execute(self, cursor, statement, parameters, context = ...) -> None: ...
    def _discard_transaction(self, trans) -> None: ...
    def _execute_clauseelement(self, elem, multiparams, params) -> Any: ...
    def _execute_compiled(self, compiled, multiparams, params) -> Any: ...
    def _execute_context(self, dialect, constructor, statement, parameters, *args) -> Any: ...
    def _execute_ddl(self, ddl, multiparams, params) -> Any: ...
    def _execute_default(self, default, multiparams, params) -> Any: ...
    def _execute_function(self, func, multiparams, params) -> Any: ...
    def _execute_text(self, statement, multiparams, params) -> Any: ...
    def _handle_dbapi_exception(self, e, statement, parameters, cursor, context) -> None: ...
    @classmethod
    def _handle_dbapi_exception_noconnection(cls, e, dialect, engine) -> None: ...
    def _prepare_twophase_impl(self, xid) -> None: ...
    def _release_savepoint_impl(self, name, context) -> None: ...
    def _revalidate_connection(self) -> Any: ...
    def _rollback_impl(self) -> None: ...
    def _rollback_to_savepoint_impl(self, name, context) -> None: ...
    def _rollback_twophase_impl(self, xid, is_prepared) -> None: ...
    def _run_visitor(self, visitorcallable, element, **kwargs) -> None: ...
    def _safe_close_cursor(self, cursor) -> None: ...
    def _savepoint_impl(self, name: _T0 = ...) -> Optional[Union[str, _T0]]: ...
    def begin(self) -> Any: ...
    def begin_nested(self) -> Any: ...
    def begin_twophase(self, xid = ...) -> Any: ...
    def close(self) -> None: ...
    def commit_prepared(self, xid, recover = ...) -> None: ...
    def connect(self) -> Any: ...
    def detach(self) -> None: ...
    def execute(self, object_, *multiparams, **params) -> Any: ...
    def execution_options(self, **opt) -> Any: ...
    def get_execution_options(self) -> Any: ...
    def get_isolation_level(self) -> Any: ...
    def in_transaction(self) -> bool: ...
    def invalidate(self, exception = ...) -> None: ...
    def recover_twophase(self) -> Any: ...
    def rollback_prepared(self, xid, recover = ...) -> None: ...
    def run_callable(self, callable_, *args, **kwargs) -> Any: ...
    def scalar(self, object_, *multiparams, **params) -> Any: ...
    def transaction(self, callable_, *args, **kwargs) -> Any: ...

class Engine(Any, sqlalchemy.log.Identified):
    __doc__: str
    _connection_cls: Type[Connection]
    _execution_options: Any
    _has_events: bool
    _optional_conn_ctx_manager: Callable[..., contextlib._GeneratorContextManager]
    _trans_ctx: type
    contextual_connect: Any
    dialect: Any
    driver: Any
    echo: Any
    engine: Any
    hide_parameters: Any
    logging_name: Any
    name: Any
    pool: Any
    schema_for_object: Any
    url: Any
    def __init__(self, pool, dialect, url, logging_name = ..., echo = ..., proxy = ..., execution_options = ..., hide_parameters = ...) -> None: ...
    def __repr__(self) -> str: ...
    def _contextual_connect(self, close_with_result = ..., **kwargs) -> Connection: ...
    def _execute_clauseelement(self, elem, multiparams = ..., params = ...) -> Any: ...
    def _execute_compiled(self, compiled, multiparams, params) -> Any: ...
    def _execute_default(self, default) -> Any: ...
    def _run_visitor(self, visitorcallable, element, connection = ..., **kwargs) -> None: ...
    def _wrap_pool_connect(self, fn, connection) -> Any: ...
    def begin(self, close_with_result = ...) -> Any: ...
    def connect(self, **kwargs) -> Connection: ...
    def dispose(self) -> None: ...
    def execute(self, statement, *multiparams, **params) -> Any: ...
    def execution_options(self, **opt) -> OptionEngine: ...
    def get_execution_options(self) -> Any: ...
    def has_table(self, table_name, schema = ...) -> Any: ...
    def raw_connection(self, _connection = ...) -> Any: ...
    def run_callable(self, callable_, *args, **kwargs) -> Any: ...
    def scalar(self, statement, *multiparams, **params) -> Any: ...
    def table_names(self, schema = ..., connection = ...) -> Any: ...
    def transaction(self, callable_, *args, **kwargs) -> Any: ...
    def update_execution_options(self, **opt) -> None: ...

class ExceptionContextImpl(Any):
    __doc__: str
    chained_exception: Any
    connection: Any
    engine: Any
    execution_context: Any
    invalidate_pool_on_disconnect: Any
    is_disconnect: Any
    original_exception: Any
    parameters: Any
    sqlalchemy_exception: Any
    statement: Any
    def __init__(self, exception, sqlalchemy_exception, engine, connection, cursor, statement, parameters, context, is_disconnect, invalidate_pool_on_disconnect) -> None: ...

class NestedTransaction(Transaction):
    __doc__: str
    _actual_parent: Any
    _savepoint: Any
    connection: Any
    is_active: bool
    def __init__(self, connection, parent) -> None: ...
    def _do_commit(self) -> None: ...
    def _do_rollback(self) -> None: ...

class OptionEngine(Engine):
    _execution_options: Any
    _has_events: Any
    _proxied: Any
    _sa_propagate_class_events: bool
    dialect: Any
    dispatch: Any
    echo: Any
    hide_parameters: Any
    logging_name: Any
    pool: Any
    url: Any
    def __init__(self, proxied, execution_options) -> None: ...
    def _get_has_events(self) -> Any: ...
    def _get_pool(self) -> Any: ...
    def _set_has_events(self, value) -> None: ...
    def _set_pool(self, pool) -> None: ...

class RootTransaction(Transaction):
    _actual_parent: None
    connection: Any
    is_active: bool
    def __init__(self, connection) -> None: ...
    def _do_commit(self) -> None: ...
    def _do_rollback(self) -> None: ...

class Transaction:
    __doc__: str
    _actual_parent: Any
    _parent: Any
    connection: Any
    is_active: bool
    def __enter__(self: _TTransaction) -> _TTransaction: ...
    def __exit__(self, type_, value, traceback) -> None: ...
    def __init__(self, connection, parent) -> None: ...
    def _do_commit(self) -> None: ...
    def _do_rollback(self) -> None: ...
    def close(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class TwoPhaseTransaction(Transaction):
    __doc__: str
    _actual_parent: None
    _is_prepared: bool
    connection: Any
    is_active: bool
    xid: Any
    def __init__(self, connection, xid) -> None: ...
    def _do_commit(self) -> None: ...
    def _do_rollback(self) -> None: ...
    def prepare(self) -> None: ...
