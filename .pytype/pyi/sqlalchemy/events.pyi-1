# (generated with --quick)

from typing import Any

Connectable: Any
Dialect: Any
Engine: Any
Pool: Any
SchemaEventTarget: Any
event: Any
exc: Any
util: module

class ConnectionEvents(Any):
    __doc__: str
    _dispatch_target: Any
    _target_class_doc: str
    dbapi_error: Any
    @classmethod
    def _listen(cls, event_key, retval = ...) -> None: ...
    def after_cursor_execute(self, conn, cursor, statement, parameters, context, executemany) -> None: ...
    def after_execute(self, conn, clauseelement, multiparams, params, result) -> None: ...
    def before_cursor_execute(self, conn, cursor, statement, parameters, context, executemany) -> None: ...
    def before_execute(self, conn, clauseelement, multiparams, params) -> None: ...
    def begin(self, conn) -> None: ...
    def begin_twophase(self, conn, xid) -> None: ...
    def commit(self, conn) -> None: ...
    def commit_twophase(self, conn, xid, is_prepared) -> None: ...
    def engine_connect(self, conn, branch) -> None: ...
    def engine_disposed(self, engine) -> None: ...
    def handle_error(self, exception_context) -> None: ...
    def prepare_twophase(self, conn, xid) -> None: ...
    def release_savepoint(self, conn, name, context) -> None: ...
    def rollback(self, conn) -> None: ...
    def rollback_savepoint(self, conn, name, context) -> None: ...
    def rollback_twophase(self, conn, xid, is_prepared) -> None: ...
    def savepoint(self, conn, name) -> None: ...
    def set_connection_execution_options(self, conn, opts) -> None: ...
    def set_engine_execution_options(self, engine, opts) -> None: ...

class DDLEvents(Any):
    __doc__: str
    _dispatch_target: Any
    _target_class_doc: str
    def after_create(self, target, connection, **kw) -> None: ...
    def after_drop(self, target, connection, **kw) -> None: ...
    def after_parent_attach(self, target, parent) -> None: ...
    def before_create(self, target, connection, **kw) -> None: ...
    def before_drop(self, target, connection, **kw) -> None: ...
    def before_parent_attach(self, target, parent) -> None: ...
    def column_reflect(self, inspector, table, column_info) -> None: ...

class DialectEvents(Any):
    __doc__: str
    _dispatch_target: Any
    _target_class_doc: str
    @classmethod
    def _accept_with(cls, target) -> Any: ...
    @classmethod
    def _listen(cls, event_key, retval = ...) -> None: ...
    def do_connect(self, dialect, conn_rec, cargs, cparams) -> None: ...
    def do_execute(self, cursor, statement, parameters, context) -> None: ...
    def do_execute_no_params(self, cursor, statement, context) -> None: ...
    def do_executemany(self, cursor, statement, parameters, context) -> None: ...
    def do_setinputsizes(self, inputsizes, cursor, statement, parameters, context) -> None: ...

class PoolEvents(Any):
    __doc__: str
    _dispatch_target: Any
    _target_class_doc: str
    @classmethod
    def _accept_with(cls, target) -> Any: ...
    def checkin(self, dbapi_connection, connection_record) -> None: ...
    def checkout(self, dbapi_connection, connection_record, connection_proxy) -> None: ...
    def close(self, dbapi_connection, connection_record) -> None: ...
    def close_detached(self, dbapi_connection) -> None: ...
    def connect(self, dbapi_connection, connection_record) -> None: ...
    def detach(self, dbapi_connection, connection_record) -> None: ...
    def first_connect(self, dbapi_connection, connection_record) -> None: ...
    def invalidate(self, dbapi_connection, connection_record, exception) -> None: ...
    def reset(self, dbapi_connection, connection_record) -> None: ...
    def soft_invalidate(self, dbapi_connection, connection_record, exception) -> None: ...
