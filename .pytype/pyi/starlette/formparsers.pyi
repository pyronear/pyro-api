# (generated with --quick)

import enum
import starlette.datastructures
from typing import Any, AsyncGenerator, Callable, Coroutine, Dict, List, Optional, Tuple, Type

Enum: Type[enum.Enum]
FormData: Type[starlette.datastructures.FormData]
Headers: Type[starlette.datastructures.Headers]
UploadFile: Type[starlette.datastructures.UploadFile]
multipart: Optional[module]
parse_options_header: Optional[Callable[[Any], Tuple[Any, Dict[bytes, bytes]]]]
typing: module

class FormMessage(enum.Enum):
    END: int
    FIELD_DATA: int
    FIELD_END: int
    FIELD_NAME: int
    FIELD_START: int

class FormParser:
    headers: starlette.datastructures.Headers
    messages: List[Tuple[FormMessage, bytes]]
    stream: AsyncGenerator[bytes, None]
    def __init__(self, headers: starlette.datastructures.Headers, stream: AsyncGenerator[bytes, None]) -> None: ...
    def on_end(self) -> None: ...
    def on_field_data(self, data: bytes, start: int, end: int) -> None: ...
    def on_field_end(self) -> None: ...
    def on_field_name(self, data: bytes, start: int, end: int) -> None: ...
    def on_field_start(self) -> None: ...
    def parse(self) -> Coroutine[Any, Any, starlette.datastructures.FormData]: ...

class MultiPartMessage(enum.Enum):
    END: int
    HEADERS_FINISHED: int
    HEADER_END: int
    HEADER_FIELD: int
    HEADER_VALUE: int
    PART_BEGIN: int
    PART_DATA: int
    PART_END: int

class MultiPartParser:
    headers: starlette.datastructures.Headers
    messages: List[Tuple[MultiPartMessage, bytes]]
    stream: AsyncGenerator[bytes, None]
    def __init__(self, headers: starlette.datastructures.Headers, stream: AsyncGenerator[bytes, None]) -> None: ...
    def on_end(self) -> None: ...
    def on_header_end(self) -> None: ...
    def on_header_field(self, data: bytes, start: int, end: int) -> None: ...
    def on_header_value(self, data: bytes, start: int, end: int) -> None: ...
    def on_headers_finished(self) -> None: ...
    def on_part_begin(self) -> None: ...
    def on_part_data(self, data: bytes, start: int, end: int) -> None: ...
    def on_part_end(self) -> None: ...
    def parse(self) -> Coroutine[Any, Any, starlette.datastructures.FormData]: ...

def _user_safe_decode(src: bytes, codec: str) -> str: ...
def unquote_plus(string: str, encoding: str = ..., errors: str = ...) -> str: ...
