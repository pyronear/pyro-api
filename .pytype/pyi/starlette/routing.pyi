# (generated with --quick)

import enum
import starlette.convertors
import starlette.datastructures
import starlette.exceptions
import starlette.requests
import starlette.responses
import starlette.websockets
from typing import Any, Awaitable, Callable, Coroutine, Dict, List, MutableMapping, Pattern, Sequence, Tuple, Type, TypeVar, Union

ASGIApp = Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]
Receive = Callable[[], Awaitable[MutableMapping[str, Any]]]
Scope = MutableMapping[str, Any]
Send = Callable[[MutableMapping[str, Any]], Awaitable[None]]

CONVERTOR_TYPES: Dict[str, Union[starlette.convertors.FloatConvertor, starlette.convertors.IntegerConvertor, starlette.convertors.PathConvertor, starlette.convertors.StringConvertor, starlette.convertors.UUIDConvertor]]
Convertor: Type[starlette.convertors.Convertor]
Enum: Type[enum.Enum]
HTTPException: Type[starlette.exceptions.HTTPException]
Headers: Type[starlette.datastructures.Headers]
PARAM_REGEX: Pattern[str]
PlainTextResponse: Type[starlette.responses.PlainTextResponse]
RedirectResponse: Type[starlette.responses.RedirectResponse]
Request: Type[starlette.requests.Request]
URL: Type[starlette.datastructures.URL]
URLPath: Type[starlette.datastructures.URLPath]
WebSocket: Type[starlette.websockets.WebSocket]
WebSocketClose: Type[starlette.websockets.WebSocketClose]
asyncio: module
inspect: module
re: module
traceback: module
typing: module

T = TypeVar('T')

class BaseRoute:
    def __call__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def handle(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def matches(self, scope: MutableMapping[str, Any]) -> Tuple[Match, MutableMapping[str, Any]]: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...

class Host(BaseRoute):
    app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]
    host: str
    host_format: Any
    host_regex: Any
    name: str
    param_convertors: Any
    routes: List[BaseRoute]
    def __eq__(self, other) -> bool: ...
    def __init__(self, host: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]], name: str = ...) -> None: ...
    def handle(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def matches(self, scope: MutableMapping[str, Any]) -> Tuple[Match, MutableMapping[str, Any]]: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...

class Match(enum.Enum):
    FULL: int
    NONE: int
    PARTIAL: int

class Mount(BaseRoute):
    app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]
    name: str
    param_convertors: Any
    path: str
    path_format: Any
    path_regex: Any
    routes: List[BaseRoute]
    def __eq__(self, other) -> bool: ...
    def __init__(self, path: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]] = ..., routes: Sequence[BaseRoute] = ..., name: str = ...) -> None: ...
    def handle(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def matches(self, scope: MutableMapping[str, Any]) -> Tuple[Match, MutableMapping[str, Any]]: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...

class NoMatchFound(Exception):
    __doc__: str

class Route(BaseRoute):
    app: Any
    endpoint: Callable
    include_in_schema: bool
    methods: set
    name: str
    param_convertors: Any
    path: str
    path_format: Any
    path_regex: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, path: str, endpoint: Callable, *, methods: List[str] = ..., name: str = ..., include_in_schema: bool = ...) -> None: ...
    def handle(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def matches(self, scope: MutableMapping[str, Any]) -> Tuple[Match, MutableMapping[str, Any]]: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...

class Router:
    default: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]
    lifespan_context: Callable[[Any], asyncgenerator]
    on_shutdown: List[Callable]
    on_startup: List[Callable]
    redirect_slashes: bool
    routes: List[BaseRoute]
    def __call__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def __eq__(self, other) -> bool: ...
    def __init__(self, routes: Sequence[BaseRoute] = ..., redirect_slashes: bool = ..., default: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]] = ..., on_startup: Sequence[Callable] = ..., on_shutdown: Sequence[Callable] = ..., lifespan: Callable[[Any], asyncgenerator] = ...) -> None: ...
    def add_event_handler(self, event_type: str, func: Callable) -> None: ...
    def add_route(self, path: str, endpoint: Callable, methods: List[str] = ..., name: str = ..., include_in_schema: bool = ...) -> None: ...
    def add_websocket_route(self, path: str, endpoint: Callable, name: str = ...) -> None: ...
    def host(self, host: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]], name: str = ...) -> None: ...
    def lifespan(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def mount(self, path: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]], name: str = ...) -> None: ...
    def not_found(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def on_event(self, event_type: str) -> Callable: ...
    def route(self, path: str, methods: List[str] = ..., name: str = ..., include_in_schema: bool = ...) -> Callable: ...
    def shutdown(self) -> Coroutine[Any, Any, None]: ...
    def startup(self) -> Coroutine[Any, Any, None]: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...
    def websocket_route(self, path: str, name: str = ...) -> Callable: ...

class WebSocketRoute(BaseRoute):
    app: Any
    endpoint: Callable
    name: str
    param_convertors: Any
    path: str
    path_format: Any
    path_regex: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, path: str, endpoint: Callable, *, name: str = ...) -> None: ...
    def handle(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def matches(self, scope: MutableMapping[str, Any]) -> Tuple[Match, MutableMapping[str, Any]]: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...

def compile_path(path: str) -> Tuple[Pattern, str, Dict[str, starlette.convertors.Convertor]]: ...
def get_name(endpoint: Callable) -> str: ...
def replace_params(path: str, param_convertors: Dict[str, starlette.convertors.Convertor], path_params: Dict[str, str]) -> Tuple[str, dict]: ...
def request_response(func: Callable) -> Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]: ...
def run_in_threadpool(func: Callable[..., T], *args, **kwargs) -> coroutine: ...
def websocket_session(func: Callable) -> Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]: ...
