# (generated with --quick)

from typing import Any, Dict, Union

CONVERTOR_TYPES: Dict[str, Union[FloatConvertor, IntegerConvertor, PathConvertor, StringConvertor, UUIDConvertor]]
math: module
typing: module
uuid: module

class Convertor:
    regex: str
    def convert(self, value: str) -> Any: ...
    def to_string(self, value) -> str: ...

class FloatConvertor(Convertor):
    regex: str
    def convert(self, value: str) -> Any: ...
    def to_string(self, value) -> str: ...

class IntegerConvertor(Convertor):
    regex: str
    def convert(self, value: str) -> Any: ...
    def to_string(self, value) -> str: ...

class PathConvertor(Convertor):
    regex: str
    def convert(self, value: str) -> Any: ...
    def to_string(self, value) -> str: ...

class StringConvertor(Convertor):
    regex: str
    def convert(self, value: str) -> Any: ...
    def to_string(self, value) -> str: ...

class UUIDConvertor(Convertor):
    regex: str
    def convert(self, value: str) -> Any: ...
    def to_string(self, value) -> str: ...
