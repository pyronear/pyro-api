# (generated with --quick)

import starlette.datastructures
import starlette.exceptions
import starlette.middleware
import starlette.middleware.base
import starlette.middleware.errors
import starlette.routing
from typing import Any, Awaitable, Callable, Coroutine, Dict, List, MutableMapping, Sequence, Type, Union

ASGIApp = Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]
Receive = Callable[[], Awaitable[MutableMapping[str, Any]]]
Scope = MutableMapping[str, Any]
Send = Callable[[MutableMapping[str, Any]], Awaitable[None]]

BaseHTTPMiddleware: Type[starlette.middleware.base.BaseHTTPMiddleware]
BaseRoute: Type[starlette.routing.BaseRoute]
ExceptionMiddleware: Type[starlette.exceptions.ExceptionMiddleware]
Middleware: Type[starlette.middleware.Middleware]
Router: Type[starlette.routing.Router]
ServerErrorMiddleware: Type[starlette.middleware.errors.ServerErrorMiddleware]
State: Type[starlette.datastructures.State]
URLPath: Type[starlette.datastructures.URLPath]
typing: module

class Starlette:
    __doc__: str
    debug: bool
    routes: List[starlette.routing.BaseRoute]
    def __call__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def __init__(self, debug: bool = ..., routes: Sequence[starlette.routing.BaseRoute] = ..., middleware: Sequence[starlette.middleware.Middleware] = ..., exception_handlers: Dict[Union[int, Type[Exception]], Callable] = ..., on_startup: Sequence[Callable] = ..., on_shutdown: Sequence[Callable] = ..., lifespan: Callable[[Starlette], asyncgenerator] = ...) -> None: ...
    def add_event_handler(self, event_type: str, func: Callable) -> None: ...
    def add_exception_handler(self, exc_class_or_status_code: Union[int, Type[Exception]], handler: Callable) -> None: ...
    def add_middleware(self, middleware_class: type, **options) -> None: ...
    def add_route(self, path: str, route: Callable, methods: List[str] = ..., name: str = ..., include_in_schema: bool = ...) -> None: ...
    def add_websocket_route(self, path: str, route: Callable, name: str = ...) -> None: ...
    def build_middleware_stack(self) -> Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]]: ...
    def exception_handler(self, exc_class_or_status_code: Union[int, Type[Exception]]) -> Callable: ...
    def host(self, host: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]], name: str = ...) -> None: ...
    def middleware(self, middleware_type: str) -> Callable: ...
    def mount(self, path: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[None]]], Awaitable[None]], name: str = ...) -> None: ...
    def on_event(self, event_type: str) -> Callable: ...
    def route(self, path: str, methods: List[str] = ..., name: str = ..., include_in_schema: bool = ...) -> Callable: ...
    def url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath: ...
    def websocket_route(self, path: str, name: str = ...) -> Callable: ...
