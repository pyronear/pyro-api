# (generated with --quick)

import starlette.requests
from typing import Any, AsyncIterator, Awaitable, Callable, Coroutine, MutableMapping, Type

Message = MutableMapping[str, Any]
Receive = Callable[[], Awaitable[MutableMapping[str, Any]]]
Scope = MutableMapping[str, Any]
Send = Callable[[MutableMapping[str, Any]], Awaitable[None]]

HTTPConnection: Type[starlette.requests.HTTPConnection]
enum: module
json: module
typing: module

class WebSocket(starlette.requests.HTTPConnection):
    _receive: Callable[[], Awaitable[MutableMapping[str, Any]]]
    _send: Callable[[MutableMapping[str, Any]], Awaitable[None]]
    application_state: Any
    client_state: Any
    def __init__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> None: ...
    def _raise_on_disconnect(self, message: MutableMapping[str, Any]) -> None: ...
    def accept(self, subprotocol: str = ...) -> Coroutine[Any, Any, None]: ...
    def close(self, code: int = ...) -> Coroutine[Any, Any, None]: ...
    def iter_bytes(self) -> AsyncIterator[bytes]: ...
    def iter_json(self) -> AsyncIterator: ...
    def iter_text(self) -> AsyncIterator[str]: ...
    def receive(self) -> Coroutine[Any, Any, MutableMapping[str, Any]]: ...
    def receive_bytes(self) -> Coroutine[Any, Any, bytes]: ...
    def receive_json(self, mode: str = ...) -> coroutine: ...
    def receive_text(self) -> Coroutine[Any, Any, str]: ...
    def send(self, message: MutableMapping[str, Any]) -> Coroutine[Any, Any, None]: ...
    def send_bytes(self, data: bytes) -> Coroutine[Any, Any, None]: ...
    def send_json(self, data, mode: str = ...) -> Coroutine[Any, Any, None]: ...
    def send_text(self, data: str) -> Coroutine[Any, Any, None]: ...

class WebSocketClose:
    code: int
    def __call__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[None]]) -> Coroutine[Any, Any, None]: ...
    def __init__(self, code: int = ...) -> None: ...

class WebSocketDisconnect(Exception):
    code: int
    def __init__(self, code: int = ...) -> None: ...

class WebSocketState(enum.Enum):
    CONNECTED: int
    CONNECTING: int
    DISCONNECTED: int
