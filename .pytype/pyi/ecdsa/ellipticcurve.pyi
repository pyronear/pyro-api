# (generated with --quick)

import __future__
from typing import Any, TypeVar

INFINITY: Point
division: __future__._Feature
numbertheory: module

_T0 = TypeVar('_T0')
_TPoint = TypeVar('_TPoint', bound=Point)

class CurveFp:
    _CurveFp__a: Any
    _CurveFp__b: Any
    _CurveFp__p: Any
    __doc__: str
    def __init__(self, p, a, b) -> None: ...
    def __str__(self) -> str: ...
    def a(self) -> Any: ...
    def b(self) -> Any: ...
    def contains_point(self, x, y) -> Any: ...
    def p(self) -> Any: ...

class Point:
    _Point__curve: Any
    _Point__order: Any
    _Point__x: Any
    _Point__y: Any
    __doc__: str
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __init__(self, curve, x, y, order = ...) -> None: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self: _TPoint) -> _TPoint: ...
    def __rmul__(self, other) -> Any: ...
    def __str__(self) -> str: ...
    def curve(self) -> Any: ...
    def double(self: _TPoint) -> _TPoint: ...
    def order(self) -> Any: ...
    def x(self) -> Any: ...
    def y(self) -> Any: ...

def python_2_unicode_compatible(klass: _T0) -> _T0: ...
