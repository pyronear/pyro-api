# (generated with --quick)

import __builtin__
import __future__
import hashlib
from typing import Any, Iterator, Tuple, TypeVar, Union

PY3: bool
binascii: module
der: module
division: __future__._Feature
encoded_oid_ecPublicKey: bytes
math: module
oid_ecPublicKey: Tuple[int, int, int, int, int, int]
os: module

_T = TypeVar('_T')
_T2 = TypeVar('_T2')

class MalformedSignature(Exception):
    __doc__: str

class PRNG:
    generator: Any
    def __call__(self, numbytes) -> Union[bytes, str]: ...
    def __init__(self, seed) -> None: ...
    def block_generator(self, seed) -> __builtin__.generator[int, Any, Any]: ...

def b(s) -> Any: ...
def bit_length(num) -> int: ...
def bits_and_bytes(order) -> Tuple[int, int, int]: ...
def int2byte(*v) -> bytes: ...
def lsb_of_ones(numbits) -> int: ...
@overload
def next(it) -> Any: ...
@overload
def next(iterator: Iterator[_T], default: _T2 = ...) -> Union[_T, _T2]: ...
def normalise_bytes(buffer_object) -> Any: ...
def number_to_string(num, order) -> bytes: ...
def number_to_string_crop(num, order) -> bytes: ...
def orderlen(order) -> int: ...
def randrange(order, entropy = ...) -> Any: ...
def randrange_from_seed__overshoot_modulo(seed, order) -> Any: ...
def randrange_from_seed__truncate_bits(seed, order, hashmod = ...) -> int: ...
def randrange_from_seed__truncate_bytes(seed, order, hashmod = ...) -> int: ...
def randrange_from_seed__trytryagain(seed, order) -> Any: ...
def sha256(string: bytes = ...) -> hashlib._Hash: ...
def sigdecode_der(sig_der, order) -> Tuple[int, int]: ...
def sigdecode_string(signature, order) -> Tuple[Any, Any]: ...
def sigdecode_strings(rs_strings, order) -> Tuple[Any, Any]: ...
def sigencode_der(r, s, order) -> Any: ...
def sigencode_der_canonize(r, s, order) -> Any: ...
def sigencode_string(r, s, order) -> Any: ...
def sigencode_string_canonize(r, s, order) -> Any: ...
def sigencode_strings(r, s, order) -> Tuple[Any, Any]: ...
def sigencode_strings_canonize(r, s, order) -> Any: ...
def string_to_number(string) -> int: ...
def string_to_number_fixedlen(string, order) -> int: ...
