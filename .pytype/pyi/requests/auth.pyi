# (generated with --quick)

import __builtin__
from typing import Any, Dict, NoReturn, Optional, Tuple, Type, TypeVar
import urllib.parse

CONTENT_TYPE_FORM_URLENCODED: __builtin__.str
CONTENT_TYPE_MULTI_PART: __builtin__.str
basestring: Tuple[Type[__builtin__.str], Type[bytes]]
hashlib: module
os: module
re: module
str: Type[__builtin__.str]
threading: module
time: module
warnings: module

_T0 = TypeVar('_T0')

class AuthBase:
    __doc__: __builtin__.str
    def __call__(self, r) -> NoReturn: ...

class HTTPBasicAuth(AuthBase):
    __doc__: __builtin__.str
    password: Any
    username: Any
    def __call__(self, r: _T0) -> _T0: ...
    def __eq__(self, other) -> bool: ...
    def __init__(self, username, password) -> None: ...
    def __ne__(self, other) -> bool: ...

class HTTPDigestAuth(AuthBase):
    __doc__: __builtin__.str
    _thread_local: threading.local
    password: Any
    username: Any
    def __call__(self, r: _T0) -> _T0: ...
    def __eq__(self, other) -> bool: ...
    def __init__(self, username, password) -> None: ...
    def __ne__(self, other) -> bool: ...
    def build_digest_header(self, method, url) -> Optional[__builtin__.str]: ...
    def handle_401(self, r, **kwargs) -> Any: ...
    def handle_redirect(self, r, **kwargs) -> None: ...
    def init_per_thread_state(self) -> None: ...

class HTTPProxyAuth(HTTPBasicAuth):
    __doc__: __builtin__.str
    password: Any
    username: Any
    def __call__(self, r: _T0) -> _T0: ...

def _basic_auth_str(username, password) -> __builtin__.str: ...
def b64encode(s: bytes, altchars: Optional[bytes] = ...) -> bytes: ...
def extract_cookies_to_jar(jar, request, response) -> None: ...
def parse_dict_header(value) -> Dict[__builtin__.str, Any]: ...
def to_native_string(string, encoding = ...) -> Any: ...
@overload
def urlparse(url: __builtin__.str, scheme: Optional[__builtin__.str] = ..., allow_fragments: bool = ...) -> urllib.parse.ParseResult: ...
@overload
def urlparse(url: Optional[bytes], scheme: Optional[bytes] = ..., allow_fragments: bool = ...) -> urllib.parse.ParseResultBytes: ...
