# (generated with --quick)

import collections
import typing
from typing import Any, Tuple, Type, TypeVar, Union

Mapping: Type[typing.Mapping]
MutableMapping: Type[typing.MutableMapping]
OrderedDict: Type[collections.OrderedDict]

_TCaseInsensitiveDict = TypeVar('_TCaseInsensitiveDict', bound=CaseInsensitiveDict)

class CaseInsensitiveDict(typing.MutableMapping):
    __doc__: str
    _store: collections.OrderedDict[Any, Tuple[Any, Any]]
    def __delitem__(self, key) -> None: ...
    def __eq__(self, other) -> Union[NotImplementedType, bool]: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self, data = ..., **kwargs) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __setitem__(self, key, value) -> None: ...
    def copy(self: _TCaseInsensitiveDict) -> _TCaseInsensitiveDict: ...
    def lower_items(self) -> Any: ...

class LookupDict(dict):
    __doc__: str
    name: Any
    def __getitem__(self, key) -> Any: ...
    def __init__(self, name = ...) -> None: ...
    def __repr__(self) -> str: ...
    def get(self, key, default = ...) -> Any: ...
