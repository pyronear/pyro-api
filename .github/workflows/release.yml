name: release

on:
  release:
    types: [ published ]

jobs:
  dockerhub-publish:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PW }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: pyronear/pyro-api:latest
          context: src

  pypi-publish:
    if: "!github.event.release.prerelease"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
          architecture: x64
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pkg-deps-${{ matrix.python }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine --upgrade
      - name: Get release tag
        id: release_tag
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          BUILD_VERSION: ${{ steps.release_tag.outputs.VERSION }}
        run: |
          cd client && python setup.py sdist bdist_wheel && cd ..
          twine check client/dist/*
          twine upload client/dist/*

  pypi-check:
    if: "!github.event.release.prerelease"
    needs: pypi-publish-client
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
          architecture: x64
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install pyroclient
          python -c "import pyroclient; print(pyroclient.__version__)"

  conda-publish:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Miniconda setup
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.8
      - name: Install dependencies
        run: |
          conda install -y conda-build conda-verify anaconda-client
      - name: Get release tag
        id: release_tag
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Build and publish
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
          BUILD_VERSION: ${{ steps.release_tag.outputs.VERSION }}
        run: |
          cd client && python setup.py sdist && cd ..
          mkdir client/conda-dist
          cd client && conda-build .conda/ --output-folder conda-dist && cd ..
          ls -l client/conda-dist/noarch/*tar.bz2
          anaconda upload client/conda-dist/noarch/*tar.bz2 -u pyronear

  conda-check:
    if: "!github.event.release.prerelease"
    needs: conda-publish-client
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Miniconda setup
        uses: conda-incubator/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
      - name: Install package
        run: |
          conda install -c pyronear pyroclient
          python -c "import pyroclient; print(pyroclient.__version__)"
