name: client-upload

on:
  release:
    types: [published]

jobs:

  pypi-publish:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
          architecture: x64
      - name: Cache python modules
        uses: actions/cache@v2
        env:
          cache-name: client-reqs
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('client/requirements.txt') }}-${{ hashFiles('client/**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('client/requirements.txt') }}-
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine --upgrade
      - name: Get release tag
        id: release_tag
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          VERSION: ${{ steps.release_tag.outputs.VERSION }}
        run: |
          VERSION="${VERSION:1}"
          cd client && BUILD_VERSION=$VERSION python setup.py sdist bdist_wheel && cd ..
          twine check client/dist/*
          twine upload client/dist/*

  pypi-check:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    needs: pypi-publish
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
          architecture: x64
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install pyroclient
          python -c "import pyroclient; print(pyroclient.__version__)"

  conda-publish:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Miniconda setup
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.7
      - name: Install dependencies
        run: |
          conda install -y conda-build conda-verify anaconda-client
      - name: Get release tag
        id: release_tag
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Build and publish
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
          VERSION: ${{ steps.release_tag.outputs.VERSION }}
        run: |
          VERSION="${VERSION:1}"
          cd client && BUILD_VERSION=$VERSION python setup.py sdist && cd ..
          mkdir client/conda-dist
          cd client && BUILD_VERSION=$VERSION conda-build .conda/ --output-folder conda-dist && cd ..
          ls -l client/conda-dist/noarch/*tar.bz2
          anaconda upload client/conda-dist/noarch/*tar.bz2 -u pyronear

  conda-check:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    needs: conda-publish
    steps:
      - uses: actions/checkout@v2
      - name: Miniconda setup
        uses: conda-incubator/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: 3.7
      - name: Install package
        run: |
          conda install -c pyronear pyroclient
          python -c "import pyroclient; print(pyroclient.__version__)"
