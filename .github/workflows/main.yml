name: fastapi-project

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
          architecture: x64
      - name: Cache python modules
        uses: actions/cache@v2
        env:
          cache-name: project-reqs
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-deps-${{ env.cache-name }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.cache-name }}-
            ${{ runner.os }}-deps-
            ${{ runner.os }}-
      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  flake8-py3:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
          architecture: x64
      - name: Run flake8
        run: |
          pip install flake8
          flake8 --version
          flake8 src/

  docker-ready:
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - uses: actions/checkout@v2
      - name: Build & run docker
        env:
          QARNOT_TOKEN: ${{ secrets.QARNOT_TOKEN }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          BUCKET_MEDIA_FOLDER: ${{ secrets.BUCKET_MEDIA_FOLDER }}
        run: PORT=8002 docker-compose up -d --build
      - name: Install dependencies in docker
        run: |
          PORT=8002 docker-compose exec -T web python -m pip install --upgrade pip
          PORT=8002 docker-compose exec -T web pip install -r requirements-dev.txt
      - name: Run docker test
        run: |
          PORT=8002 docker-compose exec -T web coverage --version
          PORT=8002 docker-compose exec -T web coverage run -m pytest .
          PORT=8002 docker-compose exec -T web coverage xml
          docker cp pyro-api_web_1:/usr/src/app/coverage.xml .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true

  end-to-end:
    runs-on: ubuntu-latest
    needs: docker-ready
    steps:
      - uses: actions/checkout@v2
      - name: Build & run docker
        env:
          QARNOT_TOKEN: ${{ secrets.QARNOT_TOKEN }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          BUCKET_MEDIA_FOLDER: ${{ secrets.BUCKET_MEDIA_FOLDER }}
        run: |
          PORT=8002 docker-compose up -d --build
          docker ps
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
          architecture: x64
      - name: Install dependencies in docker
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      - name: End-to-End test
        run: |
          sleep 5
          python scripts/api_e2e.py 8002
