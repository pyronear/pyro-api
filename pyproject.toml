[build-system]
requires = ["poetry>=1.0"]
build-backend = "poetry.masonry.api"

[tool.poetry]
name = "pyro-api"
version = "0.1.2.dev0"
description = "Backend for wildfire prevention, detection and monitoring"
authors = ["Pyronear <contact@pyronear.org>"]
license = "Apache-2.0"

[tool.poetry.dependencies]
python = "^3.9"
uvicorn = ">=0.11.1,<1.0.0"
fastapi = ">=0.89.0,<0.100.0"
bcrypt = "^3.2.0"
passlib = { version = "^1.7.4", extras = ["bcrypt"] }
databases = { version = ">=0.2.6,<=0.4.0", extras = ["postgresql"] }
python-jose = "^3.2.0"
SQLAlchemy = "^1.3.12"
python-multipart = "==0.0.5"
requests = "^2.31.0"
sentry-sdk = { version = "^1.14.0", extras = ["fastapi"] }
python-magic = "^0.4.17"
boto3 = "^1.26.0"
python-dotenv = "^1.0.0"
alembic = "^1.8.1"
# https://github.com/python-poetry/poetry-plugin-export/issues/183
urllib3 = ">=1.25.4,<1.27"

[tool.poetry.group.quality]
optional = true

[tool.poetry.group.quality.dependencies]
ruff = { version = "==0.0.278" }
mypy = { version = "==1.4.1" }
types-requests = { version = ">=2.0.0" }
types-python-dateutil = {version = "^2.8.0"}
black = { version = "==23.3.0" }
bandit = { version = "^1.7.0", extras = ["toml"] }
pre-commit = { version = "^2.17.0" }
sqlalchemy-stubs = "^0.4"
types-python-jose = "^3.3.4.8"
types-passlib = "^1.7.7.12"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = ">=5.3.2,<8.0.0"
pytest-asyncio = ">=0.17.0,<1.0.0"
coverage = ">=4.5.4,<7.0.0"
aiosqlite = ">=0.16.0,<1.0.0"
httpx = ">=0.23.0"
asyncpg = ">=0.20.0,<1.0.0"

[tool.coverage.run]
source = ["src/app", "client/pyroclient"]


[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    # "D101", "D103",  # pydocstyle missing docstring in public function/class
    "D201","D202","D207","D208","D214","D215","D300","D301","D417", "D419",  # pydocstyle
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "CPY001",  # flake8-copyright
    "ISC",  # flake8-implicit-str-concat
    "PYI",  # flake8-pyi
    "NPY",  # numpy
    "PERF",  # perflint
    "RUF",  # ruff specific
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
    "C901",  # too complex
    "F403",  # star imports
    "E731",  # lambda assignment
    "C416",  # list comprehension to list()
]
exclude = [".git", "engine"]
line-length = 120
target-version = "py39"

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["I001", "F401", "CPY001"]
"scripts/**.py" = ["D"]
".github/**.py" = ["D"]
"client/docs/**.py" = ["E402"]
"src/tests/**.py" = ["D103", "CPY001"]
"client/tests/**.py" = ["D103", "CPY001"]


[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.isort]
known-first-party = ["app", "tests", "pyroclient"]
known-third-party = ["fastapi"]


[tool.mypy]
python_version = "3.9"
mypy_path = "src/"
files = "src/app"
show_error_codes = true
pretty = true
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = true
check_untyped_defs = true
implicit_reexport = false
explicit_package_bases = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "magic",
    "boto3",
    "databases",
]
ignore_missing_imports = true

[tool.black]
line-length = 120
target-version = ['py39']

[tool.bandit]
exclude_dirs = []
skips = ["B101"]
